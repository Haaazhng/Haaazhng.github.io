<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单周期CPU设计</title>
      <link href="/2023/05/25/22462.html"/>
      <url>/2023/05/25/22462.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>单周期CPU，即在一个时钟周期内将一条指令执行完后再开始执行下一条指令的CPU。要想设计好单周期CPU，最重要的一点是要深入且准确的理解每条指令在数据通路中的路径。在此前提下，我们将数据通路中的各个模块封装，使用结构化的方式设计CPU，即在CPU得到顶层模块中例化各个模块。数据通路如下所示：<br><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251245837.png"><br>实现了RISC_V 32位指令集架构下的21种指令add、addi、xor、or、and、lui、auipc、lw、sw、jal、jalr、sll、slli、srl、srli、beq、bne、blt、bge、bltu、bgeu<br>数据通路中有一些用于debug的模块和连线，大家可以自己实现debug模块，也可将这些部分删除，只完成一个CPU。<br>下面是部分核心模块的具体代码实现。</p><h3 id="IMM生成器"><a href="#IMM生成器" class="headerlink" title="IMM生成器"></a>IMM生成器</h3><p>传入的参数imm_type指定了需要生成的立即数类型，我们根据这个来处理立即数。一共有六种立即数 ：R，I，S，B，U，J。更准确的说imm_type指示的是执行的指令类型，因为R型指令并不需要立即数，我们把它放在case语句的default语句里默认输出立即数为0，其实这个默认值并不重要，它不会影响指令的执行结果，因为立即数作为输入之一的选择器会选择其他需要的信号。这些选择器其实就是alu_op2_sel和reg_write_sel，即立即数既可能作为ALU操作数的输入（显然的），又可能需要写入目标寄存器（lui）指令。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Immediate</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> inst<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> imm_type<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> imm    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">parameter</span> R_type<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> I_type<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> S_type<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>  B_type<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> U_type<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> J_type<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>imm_type<span class="token punctuation">)</span>            I_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span><span class="token number">20</span><span class="token operator">&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             S_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span><span class="token number">20</span><span class="token operator">&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             B_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span><span class="token number">20</span><span class="token operator">&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1'b0</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             U_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">,</span> <span class="token operator">&#123;</span><span class="token number">12</span><span class="token operator">&#123;</span><span class="token number">1'b0</span><span class="token operator">&#125;&#125;&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             J_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span><span class="token number">12</span><span class="token operator">&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1'b0</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                imm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Control模块"><a href="#Control模块" class="headerlink" title="Control模块"></a>Control模块</h3><p>这是至关重要的一个模块，它是整个CPU的控制中枢。前面说过，我们需要理解每一条指令在数据通中的路径，否则，Control模块就无从入手。这个模块设计多个控制信号的产生。为了更加脉络清晰、条理分明的完成这个部分，我制作出了21条指令的对应的控制信号表格：</p><table width="500" border="2">    <tr align="center">        <th>\</th>        <th>jal</th>        <th>jalr</th>        <th>br_type</th>        <th>wb_en</th>        <th>wb_sel</th>        <th>alu_op1_sel</th>        <th>alu_op2_sel</th>        <th>alu_ctrl</th>        <th>imm_type</th>        <th>mem_wb_en</th>    </tr>    <tr align="center">        <th>add</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>srl</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1000</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>sll</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1001</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>or</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0110</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>and</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0101</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>xor</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0111</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>jal</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>J</th>        <th>0</th>    </tr>    <tr align="center">        <th>addi</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>I</th>        <th>0</th>    </tr>        <tr align="center">        <th>jalr</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>I</th>        <th>0</th>    </tr>    <tr align="center">        <th>slli</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1001</th>        <th>I</th>        <th>0</th>    </tr>    <tr align="center">        <th>srli</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1000</th>        <th>I</th>        <th>0</th>    </tr>    <tr align="center">        <th>blt</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>beq</th>        <th>0</th>        <th>0</th>        <th>2</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>bne</th>        <th>0</th>        <th>0</th>        <th>3</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>bge</th>        <th>0</th>        <th>0</th>        <th>4</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>bltu</th>        <th>0</th>        <th>0</th>        <th>5</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>bgeu</th>        <th>0</th>        <th>0</th>        <th>6</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>auipc</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>U</th>        <th>0</th>    </tr>    <tr align="center">        <th>lui</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>3</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>U</th>        <th>0</th>    </tr>    <tr align="center">        <th>lw</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>2</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>I</th>        <th>0</th>    </tr>    <tr align="center">        <th>sw</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>S</th>        <th>1</th>    </tr></table><p>我们可以观察到，对于大多数控制信号，某个值都占了半数以上。这个值我们可以在每个信号的对应case语句中的default部分默认赋值，甚至用if~else就可以完成一个信号的赋值，这样就减少了代码量。</p><h3 id="Branch分支模块"><a href="#Branch分支模块" class="headerlink" title="Branch分支模块"></a>Branch分支模块</h3><p>当指令是一个分支指令时，该模块就可以根据控制模块发出的br_type信号处理比较op1和op2，然后输出br跳转信号。br会输入到下一指令地址选择模块中（NPC_SEL）。我们一共有六种跳转指令，其中有两个是无符号比较bltu和bgeu，两个有符号比较blt和bge，而bne和beq无所谓有符号或无符号比较，因为都能输出期望结果。需要注意的是Verilog中的比较逻辑默认是无符号比较，对于blt和bge指令，需要用$signed()来指示操作数其是一个有符号数。经过比较后，若需要跳转，则br&#x3D;1，否则br&#x3D;0。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> Branch <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> br_type<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> op1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> op2<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> br<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>br_type<span class="token punctuation">)</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//blt</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//beq</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">==</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bne</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">!=</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bge</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bltu</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">&lt;</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bgeu</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">>=</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>         <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NPC-SEL选择模块"><a href="#NPC-SEL选择模块" class="headerlink" title="NPC_SEL选择模块"></a>NPC_SEL选择模块</h3><p>这个模块的作用是选择下一个需要执行指令的地址。这个的选择取决于jal、jalr和br信号，皆高电平有效，Control模块对信号的处理决定了这三个信号在同一时间或都无效，或有且只有一个有效。对于jal和br信号，它们选择的都是同一个输入：pc_jal_br。因为它们的跳转地址都是pc+imm；这个值由ALU计算得出，所以输入端口pc_jal_br外接alu_res。jalr有效时，跳转地址是rd0+imm，同样由ALU计算得出。jalr比jal和branch指令多一个与操作。如果三个信号都无效，即无需跳转，所以程序按顺序执行下一条指令，选择器选择pc_add4作为pc_next的值。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> NPC_SEL <span class="token punctuation">(</span>    <span class="token keyword">input</span> jal<span class="token punctuation">,</span>    <span class="token keyword">input</span> jalr<span class="token punctuation">,</span>    <span class="token keyword">input</span> br<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_add4<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_jal_br<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_jalr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>jal<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> br<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            pc_next<span class="token operator">=</span>pc_jal_br<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>jalr<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            pc_next<span class="token operator">=</span>pc_jalr<span class="token punctuation">;</span>        <span class="token keyword">else</span> pc_next<span class="token operator">=</span>pc_add4<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算术逻辑单元ALU：代码如下，of为加减法运算的溢出标志信号，由于我们不需要考虑这种情况，故例化时将of信号悬空即可。<br>ALU的其他应用实例可参考另一篇文章：<a href="/2023/04/05/22462.html" title="ALU的硬件编程实现及其应用">ALU的硬件编程实现及其应用</a></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> ALU <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>     <span class="token comment">//两操作数（对于减运算，a是被减数）</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>           <span class="token comment">//操作功能（加、减、与、或、异或等）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>       <span class="token comment">//运算结果（和、差 …）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> of<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minus_b<span class="token punctuation">;</span><span class="token keyword">assign</span> minus_b<span class="token operator">=~</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//a-b=a+(-b)</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">case</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token number">4'b0000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0010</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0011</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0100</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token number">4'b0101</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0110</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">|</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0111</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token punctuation">;</span>        <span class="token number">4'b1000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token number">4'b1001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">endcase</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token comment">//加法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>      <span class="token comment">//减法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">==</span>minus_b<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有众多其他小模块，原理很简单，不一一赘述了，下面给出它们的实现：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">PC</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> rst<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_next<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span>            pc_cur<span class="token operator">&lt;=</span><span class="token number">32'h2ffc</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            pc_cur<span class="token operator">&lt;=</span>pc_next<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> RF             <span class="token comment">//三端口32 xWIDTH寄存器堆</span><span class="token punctuation">(</span>       <span class="token keyword">input</span> clk<span class="token punctuation">,</span>                      <span class="token comment">//时钟（上升沿有效）</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span>               <span class="token comment">//读端口0地址</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span>      <span class="token comment">//读端口0数据</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> ra1<span class="token punctuation">,</span>                <span class="token comment">//读端口1地址</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> rd1<span class="token punctuation">,</span>      <span class="token comment">//读端口1数据</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra_dbg<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd_dbg<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> wa<span class="token punctuation">,</span>                <span class="token comment">//写端口地址</span>    <span class="token keyword">input</span> we<span class="token punctuation">,</span>                       <span class="token comment">//写使能，高电平有效</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> wd         <span class="token comment">//写端口数据</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> Regfile<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">integer</span> i<span class="token punctuation">;</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        Regfile<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32'b0</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        Regfile<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32'h2ffc</span><span class="token punctuation">;</span>        Regfile<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32'h1800</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span>  rd0 <span class="token operator">=</span> Regfile<span class="token punctuation">[</span>ra0<span class="token punctuation">]</span><span class="token punctuation">,</span>            rd1 <span class="token operator">=</span> Regfile<span class="token punctuation">[</span>ra1<span class="token punctuation">]</span><span class="token punctuation">,</span>            rd_dbg <span class="token operator">=</span> Regfile<span class="token punctuation">[</span>ra_dbg<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        Regfile<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>we<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> wa<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> Regfile<span class="token punctuation">[</span>wa<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> wd<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> <span class="token function">ADD</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> lhs<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rhs<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> res <span class="token operator">=</span> lhs <span class="token operator">+</span> rhs<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> <span class="token function">AND</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> lhs<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rhs<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> res <span class="token operator">=</span> lhs <span class="token operator">&amp;</span> rhs<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> MUX1 <span class="token punctuation">(</span>    <span class="token keyword">input</span> sel<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src0<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span>            res<span class="token operator">=</span>src1<span class="token punctuation">;</span>        <span class="token keyword">else</span>             res<span class="token operator">=</span>src0<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> MUX2 <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> sel<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src0<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src2<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src3<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>sel<span class="token punctuation">)</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                res<span class="token operator">=</span>src0<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                res<span class="token operator">=</span>src1<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                res<span class="token operator">=</span>src2<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                res<span class="token operator">=</span>src3<span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再根据数据通路，在<em>CPU.v</em>设计文件中将这些模块一一例化，并将每个模块的端口正确连线，就大功告成了！</p>]]></content>
      
      
      <categories>
          
          <category> COD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> RISC-V </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用寄存器堆设计FIFO队列</title>
      <link href="/2023/04/14/22462.html"/>
      <url>/2023/04/14/22462.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h2><p><strong>定义</strong><br>FIFO队列，即First in first out，与Last in first out 的LIFO栈相对。<br><strong>特点</strong><br>没有外部读写地址线，数据由内部读写指针自动加一完成。<br><strong>分类</strong><br>分为同步FIFO和异步FIFO。同步FIFO的读与写使用同一个时钟，常用于同步时钟的数据缓存。异步FIFO的读与写相互独立，用于跨时钟的数据信号的传递。</p><h2 id="端口说明"><a href="#端口说明" class="headerlink" title="端口说明"></a>端口说明</h2><p>以下为FIFO模块的框图：</p><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202304141419447.png"><p>clk,rst：时钟与复位信号<br>deq,enq：出入队使能信号，高电平有效，一次即允许操作一项数据<br>out,in：出&#x2F;入队数据<br>full,empty：队满&#x2F;空信号<br>an,seg：数码管控制信号，显示队列数据</p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p>采用结构化的方式描述和实现电路。将电路分为队列控制单元LCU、寄存器堆RF和数码管显示单元SDU。内部信号valid[7:0]指示对应寄存器数据是否有效，即是否在队列中。</p><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202304141427155.png"><h2 id="LCU设计"><a href="#LCU设计" class="headerlink" title="LCU设计"></a>LCU设计</h2><p>我们对一些核心代码进行分析。<br>首先我们需要对deq和enq信号进行处理，代码如下，分别使用三个寄存器来获得有效信号（高电平）只延续单个时钟周期长度的de_p，en_p。如此处理既减少了亚稳态的出现，又保证了出入队信号不会同时有效（互斥），且时状态机的实现更为简单。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//出入队使能信号处理</span>    de_st<span class="token operator">&lt;=</span>deq<span class="token punctuation">;</span>    en_st<span class="token operator">&lt;=</span>enq<span class="token punctuation">;</span>    de_s<span class="token operator">&lt;=</span>de_st<span class="token punctuation">;</span>    en_s<span class="token operator">&lt;=</span>en_st<span class="token punctuation">;</span>    de_pt<span class="token operator">&lt;=</span>de_s<span class="token punctuation">;</span>    en_pt<span class="token operator">&lt;=</span>en_s<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">assign</span> de_p<span class="token operator">=</span>de_s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>de_pt<span class="token punctuation">)</span><span class="token punctuation">,</span>en_p<span class="token operator">=</span>en_s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>en_pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后处理队满&#x2F;空信号：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> empty<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//队空</span>    <span class="token keyword">else</span> empty<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">if</span><span class="token punctuation">(</span>wp<span class="token operator">==</span>rp <span class="token operator">&amp;&amp;</span> valid <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> full<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//队满</span>    <span class="token keyword">else</span> full<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当valid的值为0时，说明无有效数据，即队列空，此时wp&#x3D;rp；而当读指针rp与写指针wp值相同，且valid不为零时，说明队列满。</p><p>最后时三段式有限状态机的实现：、</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//时序逻辑</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>        curr_state<span class="token operator">&lt;=</span>IDLE<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> curr_state<span class="token operator">&lt;=</span>next_state<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>de_p<span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>empty<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> next_state<span class="token operator">=</span>DEQU<span class="token punctuation">;</span>       <span class="token comment">//出队信号有效且队列不空</span>        <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>           <span class="token comment">//队列空</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_p<span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>full<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> next_state<span class="token operator">=</span>ENQU<span class="token punctuation">;</span>        <span class="token comment">//入队信号有效且队列未满</span>        <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>               <span class="token comment">//队列满</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>       <span class="token comment">//根据状态更新写/读使能信号</span>    <span class="token function">case</span><span class="token punctuation">(</span>curr_state<span class="token punctuation">)</span>    ENQU<span class="token punctuation">:</span><span class="token keyword">begin</span>        we<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    DEQU<span class="token punctuation">:</span><span class="token keyword">begin</span>        we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        re0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    IDLE<span class="token punctuation">:</span><span class="token keyword">begin</span>        we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>        we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">endcase</span><span class="token keyword">end</span><span class="token keyword">assign</span> wd<span class="token operator">=</span>in<span class="token punctuation">,</span>wa<span class="token operator">=</span>wp<span class="token punctuation">;</span><span class="token keyword">assign</span> ra0<span class="token operator">=</span>rp<span class="token punctuation">,</span>out<span class="token operator">=</span>rd0<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便描述与控制，我们给寄存器堆增加了读使能信号re。在状态机第三部分，根据当前状态值来令给读使能信号re0和写使能信号we赋值，从而实现对寄存器的读取与写入。</p><p>对于读写指针，我们需要使指针能够从0~7循环移动。直接给出LCU完整代码：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">LCU</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span> rst<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span>    <span class="token keyword">input</span> enq<span class="token punctuation">,</span>    <span class="token keyword">input</span> deq<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> empty<span class="token punctuation">,</span>full<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wa<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wd<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> we<span class="token punctuation">,</span>re0<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> valid    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">parameter</span> IDLE <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> ENQU <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span> DEQU <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">//状态值</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> curr_state<span class="token punctuation">,</span>next_state<span class="token punctuation">;</span>    <span class="token keyword">reg</span> de_st<span class="token punctuation">,</span>de_s<span class="token punctuation">,</span>de_pt<span class="token punctuation">,</span>en_st<span class="token punctuation">,</span>en_s<span class="token punctuation">,</span>en_pt<span class="token punctuation">;</span>    <span class="token keyword">wire</span> de_p<span class="token punctuation">,</span>en_p<span class="token punctuation">;</span>                             <span class="token comment">//出入队信号处理</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wp<span class="token punctuation">,</span>rp<span class="token punctuation">,</span>wp_ns<span class="token punctuation">,</span>rp_ns<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//时序逻辑</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            curr_state<span class="token operator">&lt;=</span>IDLE<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> curr_state<span class="token operator">&lt;=</span>next_state<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>de_p<span class="token punctuation">)</span><span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>empty<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> next_state<span class="token operator">=</span>DEQU<span class="token punctuation">;</span>       <span class="token comment">//出队信号有效且队列不空</span>            <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>           <span class="token comment">//队列空</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_p<span class="token punctuation">)</span><span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>full<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> next_state<span class="token operator">=</span>ENQU<span class="token punctuation">;</span>        <span class="token comment">//入队信号有效且队列未满</span>            <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>               <span class="token comment">//队列满</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//更新指针</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            wp<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            rp<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>            wp<span class="token operator">&lt;=</span>wp_ns<span class="token punctuation">;</span>            rp<span class="token operator">&lt;=</span>rp_ns<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>curr_state<span class="token operator">==</span>ENQU<span class="token punctuation">)</span><span class="token keyword">begin</span>       <span class="token comment">//将入队时，更新写指针</span>        <span class="token function">case</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">7</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">end</span>        <span class="token keyword">endcase</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> wp_ns<span class="token operator">=</span>wp<span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>curr_state<span class="token operator">==</span>DEQU<span class="token punctuation">)</span><span class="token keyword">begin</span>       <span class="token comment">//将出队时，更新读指针</span>        <span class="token function">case</span><span class="token punctuation">(</span>rp<span class="token punctuation">)</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span> <span class="token keyword">end</span>             <span class="token number">7</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">end</span>        <span class="token keyword">endcase</span>             <span class="token keyword">end</span>        <span class="token keyword">else</span> rp_ns<span class="token operator">=</span>rp<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>       <span class="token comment">//根据状态更新写/读使能信号</span>        <span class="token function">case</span><span class="token punctuation">(</span>curr_state<span class="token punctuation">)</span>        ENQU<span class="token punctuation">:</span><span class="token keyword">begin</span>            we<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        DEQU<span class="token punctuation">:</span><span class="token keyword">begin</span>            we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            re0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        IDLE<span class="token punctuation">:</span><span class="token keyword">begin</span>            we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> wd<span class="token operator">=</span>in<span class="token punctuation">,</span>wa<span class="token operator">=</span>wp<span class="token punctuation">;</span>    <span class="token keyword">assign</span> ra0<span class="token operator">=</span>rp<span class="token punctuation">,</span>out<span class="token operator">=</span>rd0<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>     <span class="token comment">//更改valid对应值</span>        <span class="token function">if</span><span class="token punctuation">(</span>curr_state<span class="token operator">==</span>DEQU<span class="token punctuation">)</span>            valid<span class="token punctuation">[</span>rp<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>curr_state<span class="token operator">==</span>ENQU<span class="token punctuation">)</span>            valid<span class="token punctuation">[</span>wp<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span>            valid<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> empty<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//队空</span>        <span class="token keyword">else</span> empty<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>wp<span class="token operator">==</span>rp <span class="token operator">&amp;&amp;</span> valid <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> full<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//队满</span>        <span class="token keyword">else</span> full<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//出入队使能信号处理</span>        de_st<span class="token operator">&lt;=</span>deq<span class="token punctuation">;</span>        en_st<span class="token operator">&lt;=</span>enq<span class="token punctuation">;</span>        de_s<span class="token operator">&lt;=</span>de_st<span class="token punctuation">;</span>        en_s<span class="token operator">&lt;=</span>en_st<span class="token punctuation">;</span>        de_pt<span class="token operator">&lt;=</span>de_s<span class="token punctuation">;</span>        en_pt<span class="token operator">&lt;=</span>en_s<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> de_p<span class="token operator">=</span>de_s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>de_pt<span class="token punctuation">)</span><span class="token punctuation">,</span>en_p<span class="token operator">=</span>en_s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>en_pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RF设计"><a href="#RF设计" class="headerlink" title="RF设计"></a>RF设计</h2><p>re0和re1是我们为了方便LCU模块的实现添加的两个读使能端口。读端口2连接在SDU模块，因此我们需要在顶层模块中令re1恒为1。请注意，由于寄存器堆的x0寄存器硬编程值为0，因此当该寄存器在队列中时，写入的数据始终无效。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> RF             <span class="token comment">//三端口32 xWIDTH寄存器堆</span><span class="token punctuation">(</span>       <span class="token keyword">input</span> clk<span class="token punctuation">,</span>                      <span class="token comment">//时钟（上升沿有效）</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span>               <span class="token comment">//读端口0地址</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span>      <span class="token comment">//读端口0数据</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> ra1<span class="token punctuation">,</span>                <span class="token comment">//读端口1地址</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> rd1<span class="token punctuation">,</span>      <span class="token comment">//读端口1数据</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> wa<span class="token punctuation">,</span>                <span class="token comment">//写端口地址</span>    <span class="token keyword">input</span> we<span class="token punctuation">,</span>                       <span class="token comment">//写使能，高电平有效</span>    <span class="token keyword">input</span> re0<span class="token punctuation">,</span>re1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> wd         <span class="token comment">//写端口数据</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> regfile<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        regfile<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>re0<span class="token punctuation">)</span><span class="token keyword">begin</span>            rd0 <span class="token operator">=</span> regfile<span class="token punctuation">[</span>ra0<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token function">if</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token keyword">begin</span>            rd1 <span class="token operator">=</span> regfile<span class="token punctuation">[</span>ra1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>we<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> wa<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> regfile<span class="token punctuation">[</span>wa<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> wd<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SDU设计"><a href="#SDU设计" class="headerlink" title="SDU设计"></a>SDU设计</h2><p>该模块的功能是将队列中的有效数据输出在八个数码管中的对应位置。即将valid值不为0的寄存器数据（也即队列数据，队列数据则是存储在寄存器堆中的）输出在数码管。这里使用了时分复用的方式依次显示。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> SDU <span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> valid<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> an<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//分时复用计数</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        cnt<span class="token operator">&lt;=</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>       <span class="token comment">//队空时，显示第一个元素（0）</span>            an<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            ra1<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>          <span class="token comment">//不为空时</span>            <span class="token function">case</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>   <span class="token comment">//显示队列中的元素</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">7</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token keyword">endcase</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> seg<span class="token operator">=</span>rd1<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Top模块"><a href="#Top模块" class="headerlink" title="Top模块"></a>Top模块</h2><p>由于我们使用了结构化方式实现电路，因此我们只需要在顶层模块中建立好内部变量，并分别例化LCU、SDU、RF模块即可。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> fifo <span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span> rst<span class="token punctuation">,</span>         <span class="token comment">//时钟（上升沿有效）、同步复位（高电平有效）</span>    <span class="token keyword">input</span> enq<span class="token punctuation">,</span>              <span class="token comment">//入队列使能，高电平有效</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span>         <span class="token comment">//入队列数据</span>    <span class="token keyword">input</span> deq<span class="token punctuation">,</span>              <span class="token comment">//出队列使能，高电平有效</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out<span class="token punctuation">,</span>       <span class="token comment">//出队列数据</span>    <span class="token keyword">output</span> full<span class="token punctuation">,</span>empty<span class="token punctuation">,</span>      <span class="token comment">//队列满和空标志</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> an<span class="token punctuation">,</span>        <span class="token comment">//数码管选择</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg        <span class="token comment">//数码管数据</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span>ra1<span class="token punctuation">,</span>wa<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span>rd1<span class="token punctuation">,</span>wd<span class="token punctuation">;</span>    <span class="token keyword">wire</span> we<span class="token punctuation">,</span>re0<span class="token punctuation">,</span>re1<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> valid<span class="token punctuation">;</span>     <span class="token keyword">assign</span> re1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    LCU <span class="token function">lcu_inst</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">rst</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">enq</span><span class="token punctuation">(</span>enq<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">deq</span><span class="token punctuation">(</span>deq<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">full</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">re0</span><span class="token punctuation">(</span>re0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">rd0</span><span class="token punctuation">(</span>rd0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">ra0</span><span class="token punctuation">(</span>ra0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">wd</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">wa</span><span class="token punctuation">(</span>wa<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    SDU <span class="token function">sdu_inst</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">rd1</span><span class="token punctuation">(</span>rd1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">ra1</span><span class="token punctuation">(</span>ra1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">an</span><span class="token punctuation">(</span>an<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">seg</span><span class="token punctuation">(</span>seg<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    RF <span class="token function">rf_inst</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">ra0</span><span class="token punctuation">(</span>ra0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">ra1</span><span class="token punctuation">(</span>ra1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">wa</span><span class="token punctuation">(</span>wa<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">rd0</span><span class="token punctuation">(</span>rd0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">rd1</span><span class="token punctuation">(</span>rd1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">re0</span><span class="token punctuation">(</span>re0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">re1</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">wd</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>以上便是FIFO信号的完整设计与实现，大家自行编写仿真文件进行仿真和编写约束文件生成bit流烧写在fpga平台。其实Vivado中已经给我们提供众多的ip核，相当于Vivado已经给我们写好了很多常用或复杂的模块，我们需要时只需要找到对应的ip核并对其例化即可。其中就包括了分布式存储器和块式存储器，大家可尝试通过例化ip核来代替RF模块。<br><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202304141514518.png"></p>]]></content>
      
      
      <categories>
          
          <category> COD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ALU的硬件编程实现及其应用</title>
      <link href="/2023/04/05/22462.html"/>
      <url>/2023/04/05/22462.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-ALU的实现"><a href="#1-ALU的实现" class="headerlink" title="1.ALU的实现"></a><a href="#1">1.ALU的实现</a></h2><h2 id="2-实现多工作模式的FLS"><a href="#2-实现多工作模式的FLS" class="headerlink" title="2.实现多工作模式的FLS"></a><a href="#2">2.实现多工作模式的FLS</a></h2><h2 id="3-仿真"><a href="#3-仿真" class="headerlink" title="3.仿真"></a><a href="#3">3.仿真</a></h2><h3 id="3-1-仿真代码"><a href="#3-1-仿真代码" class="headerlink" title="3.1.仿真代码"></a><a href="#3.1">3.1.仿真代码</a></h3><h3 id="3-2-仿真结果"><a href="#3-2-仿真结果" class="headerlink" title="3.2.仿真结果"></a><a href="#3.2">3.2.仿真结果</a></h3><h2 id="4-FPGA烧写"><a href="#4-FPGA烧写" class="headerlink" title="4.FPGA烧写"></a><a href="#4">4.FPGA烧写</a></h2><h2 id="ALU的实现"><a href="#ALU的实现" class="headerlink" title="ALU的实现"></a><span id="1">ALU的实现</span></h2><p><strong>ALU端口定义：</strong></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> alu #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">6</span>） <span class="token comment">//数据宽度</span><span class="token punctuation">(</span><span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>  <span class="token comment">//两操作数（对于减运算，a是被减数）</span><span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>        <span class="token comment">//操作功能（加、减、与、或、异或等）</span><span class="token keyword">output</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>    <span class="token comment">//运算结果（和、差 …）</span><span class="token keyword">output</span> of                <span class="token comment">//溢出标志of，加减法结果溢出时置1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ALU所实现的<strong>功能</strong>：</p><img src="/2023/04/05/22462/grid.png" class title="ALU功能图"><p>可以直接通过组合逻辑<strong>实现：</strong></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> alu #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>     <span class="token comment">//两操作数（对于减运算，a是被减数）</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>           <span class="token comment">//操作功能（加、减、与、或、异或等）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>       <span class="token comment">//运算结果（和、差 …）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> of<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minus_b<span class="token punctuation">;</span><span class="token keyword">assign</span> minus_b<span class="token operator">=~</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//a-b=a+(-b)</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">case</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token number">4'b0000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0010</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0011</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0100</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token number">4'b0101</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0110</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">|</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0111</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token punctuation">;</span>        <span class="token number">4'b1000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token number">4'b1001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">endcase</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token comment">//加法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>      <span class="token comment">//减法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>minus_b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现多工作模式的FLS"><a href="#实现多工作模式的FLS" class="headerlink" title="实现多工作模式的FLS"></a><span id="2">实现多工作模式的FLS</span></h2><p>代码严格遵循三段式有限状态机描述。<br>先给出具体实现：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> <span class="token function">fls</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span> rst<span class="token punctuation">,</span> <span class="token comment">//时钟，复位（高电平有效）</span>    <span class="token keyword">input</span> en<span class="token punctuation">,</span> <span class="token comment">//输入输出使能</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d<span class="token punctuation">,</span> <span class="token comment">//输入数列初始项</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> f<span class="token punctuation">,</span> <span class="token comment">//输出数列</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> of       <span class="token comment">//溢出</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func_cs<span class="token punctuation">,</span>func_ns<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> curr_state<span class="token punctuation">,</span> next_state<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> f_ls<span class="token punctuation">,</span> f_cs<span class="token punctuation">,</span> f_ns<span class="token punctuation">;</span>     <span class="token comment">//F(n-1),F(n),F(n+1)</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">;</span>           <span class="token comment">//ALU输出端口</span>    <span class="token keyword">wire</span> of_state<span class="token punctuation">;</span>    <span class="token keyword">reg</span> en_cs<span class="token punctuation">,</span> en_ns<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            curr_state<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_ns<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> en_cs<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token comment">//每按下一次button</span>            curr_state<span class="token operator">&lt;=</span>next_state<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        en_ns<span class="token operator">=</span>en<span class="token punctuation">;</span>        func_ns<span class="token operator">=</span>func_cs<span class="token punctuation">;</span>        <span class="token function">case</span><span class="token punctuation">(</span>curr_state<span class="token punctuation">)</span>        <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>func_ns<span class="token operator">=</span>d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//工作模式输入</span>        <span class="token keyword">end</span>        <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span>d<span class="token punctuation">;</span>        <span class="token comment">//第一项输入</span>        <span class="token keyword">end</span>        <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span>d<span class="token punctuation">;</span>        <span class="token comment">//第二项输入</span>        <span class="token keyword">end</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span>y<span class="token punctuation">;</span>        <span class="token comment">//第二项之后的项</span>        <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>        <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            f_cs<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            f_ls<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            en_cs<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_ns<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> en_cs<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token comment">//每按下一次button</span>            f_ls<span class="token operator">&lt;=</span>f_cs<span class="token punctuation">;</span>            f_cs<span class="token operator">&lt;=</span>f_ns<span class="token punctuation">;</span>            en_cs<span class="token operator">&lt;=</span>en_ns<span class="token punctuation">;</span>            func_cs<span class="token operator">&lt;=</span>func_ns<span class="token punctuation">;</span>            of<span class="token operator">&lt;=</span>of_state<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> en_cs<span class="token operator">&lt;=</span>en_ns<span class="token punctuation">;</span>    <span class="token keyword">end</span>    alu #<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token function">alu_inst</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>f_ls<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>f_cs<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>func_cs<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>of_state<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> f<span class="token operator">=</span>f_cs<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过分时复用依次输入func、FLS的前两项，之后状态机会一直工作在S3（状态编号3）:F(n)&#x3D;F(n-1)+F(n-2)。每按下一次en更新一次状态。rst为高电平时同步复位，状态回到S0。</p><h2 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a><span id="3">仿真</span></h2><h3 id="仿真代码"><a href="#仿真代码" class="headerlink" title="仿真代码"></a><span id="3.1">仿真代码</span></h3><p>vscode上编写好设计文件后，可以通过testbench插件（需要Python3的支持）快速生成仿真文件，可以将自动生成的内容复制到tb文件中。</p><img src="/2023/04/05/22462/tb.png" class title="testbench截图"><p><strong>注意：</strong> 生成的内容只是帮你创建和初始化了端口变量，并例化了模块，真正的测试内容需要自行添加。<br>插件只是帮你完成一些必需且繁琐的步骤，它并不会知道你想如何测试。所以你们可以自行添加一些测试数据，以下是一个示例：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span>  <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> <span class="token function">tb_fls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// fls Parameters</span><span class="token keyword">parameter</span> PERIOD  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// fls Inputs</span><span class="token keyword">reg</span>   clk                                  <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">reg</span>   rst                                  <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token comment">//先重置刀状态0</span><span class="token keyword">reg</span>   en                                   <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">reg</span>   <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  d                             <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token comment">// fls Outputs</span><span class="token keyword">wire</span>  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  f                             <span class="token punctuation">;</span><span class="token keyword">wire</span>  of                                   <span class="token punctuation">;</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token keyword">forever</span> #<span class="token punctuation">(</span>PERIOD<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>  clk<span class="token operator">=~</span>clk<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token keyword">forever</span> <span class="token number">#20</span>  en<span class="token operator">=~</span>en<span class="token punctuation">;</span><span class="token keyword">end</span>fls  u_fls <span class="token punctuation">(</span>    <span class="token punctuation">.</span>clk                     <span class="token punctuation">(</span> clk        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>rst                     <span class="token punctuation">(</span> rst        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>en                      <span class="token punctuation">(</span> en         <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>d                       <span class="token punctuation">(</span> d    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>f                       <span class="token punctuation">(</span> f    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>of                      <span class="token punctuation">(</span> of         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token number">#10</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token number">#10</span> d<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment">//异或模式</span>    <span class="token number">#50</span> d<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">;</span>    <span class="token number">#50</span> d<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span>    <span class="token number">#50</span> d<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token number">#550</span> rst<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token number">#30</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$finish</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a><span id="3.2">仿真结果</span></h3><p>加法模式：</p><img src="/2023/04/05/22462/plus.png" class title="加法模式仿真图"><p>减法模式：</p><img src="/2023/04/05/22462/minus.png" class title="减法模式仿真图"><p>异或模式:</p><img src="/2023/04/05/22462/xor.png" class title="异或模式仿真图"><p>其他工作模式自行测试！</p><h2 id="FPGA烧写"><a href="#FPGA烧写" class="headerlink" title="FPGA烧写"></a><span id="4">FPGA烧写</span></h2><p><strong>约束文件：</strong></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">## This file is a general <span class="token punctuation">.</span>xdc <span class="token keyword">for</span> FPGAOL_BOARD <span class="token punctuation">(</span>adopted from Nexys4 DDR Rev<span class="token punctuation">.</span> C<span class="token punctuation">)</span>## To <span class="token keyword">use</span> it in a project<span class="token punctuation">:</span>## <span class="token operator">-</span> uncomment the lines corresponding to used pins## <span class="token operator">-</span> rename the used ports <span class="token punctuation">(</span>in each line<span class="token punctuation">,</span> after get_ports<span class="token punctuation">)</span> according to the top level signal names in the project## Clock signalset_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E3    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> clk <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L12P_T1_MRCC_35 Sch<span class="token operator">=</span>clk100mhz#create_clock <span class="token operator">-</span>add <span class="token operator">-</span>name sys_clk_pin <span class="token operator">-</span>period <span class="token number">10.00</span> <span class="token operator">-</span>waveform <span class="token operator">&#123;</span><span class="token number">0</span> <span class="token number">5</span><span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span>CLK100MHZ<span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL LED <span class="token punctuation">(</span>signle<span class="token operator">-</span>digit<span class="token operator">-</span>SEGPLAY<span class="token punctuation">)</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN C17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN F18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> of <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL SWITCHset_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D14   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN F16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN H14   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN F13   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G13   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN H16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> rst <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL HEXPLAY#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A14   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A13   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A15   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN B17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_an<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN B16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_an<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_an<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL BUTTON <span class="token operator">&amp;</span> SOFT_CLOCKset_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN B18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> en <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>##USB<span class="token operator">-</span>RS232 Interface#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN C4    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_TXD_IN <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L7P_T1_AD6P_35 Sch<span class="token operator">=</span>uart_txd_in#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D4    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_RXD_OUT <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L11N_T1_SRCC_35 Sch<span class="token operator">=</span>uart_rxd_out#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D3    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_CTS <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L12N_T1_MRCC_35 Sch<span class="token operator">=</span>uart_cts#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E5    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_RTS <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L5N_T0_AD13N_35 Sch<span class="token operator">=</span>uart_rts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>烧写:</strong><br>然后在Vivado中点击左下角PROGRAM AND DEBUG&#x2F;Generate Bitstream可生成bit文件，所在目录：工程文件夹&#x2F;.runs&#x2F;impl_1&#x2F;***.bit。将其烧写在<a href="https://fpgaol.ustc.edu.cn/">FPGA在线平台</a>上即可远程控制真实的电路板。</p>]]></content>
      
      
      <categories>
          
          <category> COD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
