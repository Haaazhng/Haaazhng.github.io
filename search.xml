<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ALU的硬件编程实现及其应用</title>
      <link href="/2023/04/05/22462.html"/>
      <url>/2023/04/05/22462.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-ALU的实现"><a href="#1-ALU的实现" class="headerlink" title="1.ALU的实现"></a><a href="#1">1.ALU的实现</a></h2><h2 id="2-实现多工作模式的FLS"><a href="#2-实现多工作模式的FLS" class="headerlink" title="2.实现多工作模式的FLS"></a><a href="#2">2.实现多工作模式的FLS</a></h2><h2 id="3-仿真"><a href="#3-仿真" class="headerlink" title="3.仿真"></a><a href="#3">3.仿真</a></h2><h3 id="3-1-仿真代码"><a href="#3-1-仿真代码" class="headerlink" title="3.1.仿真代码"></a><a href="#3.1">3.1.仿真代码</a></h3><h3 id="3-2-仿真结果"><a href="#3-2-仿真结果" class="headerlink" title="3.2.仿真结果"></a><a href="#3.2">3.2.仿真结果</a></h3><h2 id="4-FPGA烧写"><a href="#4-FPGA烧写" class="headerlink" title="4.FPGA烧写"></a><a href="#4">4.FPGA烧写</a></h2><h2 id="ALU的实现"><a href="#ALU的实现" class="headerlink" title="ALU的实现"></a><span id="1">ALU的实现</span></h2><p><strong>ALU端口定义：</strong></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> alu #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">6</span>） <span class="token comment">//数据宽度</span><span class="token punctuation">(</span><span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>  <span class="token comment">//两操作数（对于减运算，a是被减数）</span><span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>        <span class="token comment">//操作功能（加、减、与、或、异或等）</span><span class="token keyword">output</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>    <span class="token comment">//运算结果（和、差 …）</span><span class="token keyword">output</span> of                <span class="token comment">//溢出标志of，加减法结果溢出时置1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ALU所实现的<strong>功能</strong>：</p><img src="/2023/04/05/22462/grid.png" class title="ALU功能图"><p>可以直接通过组合逻辑<strong>实现：</strong></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> alu #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>     <span class="token comment">//两操作数（对于减运算，a是被减数）</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>           <span class="token comment">//操作功能（加、减、与、或、异或等）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>       <span class="token comment">//运算结果（和、差 …）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> of<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minus_b<span class="token punctuation">;</span><span class="token keyword">assign</span> minus_b<span class="token operator">=~</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//a-b=a+(-b)</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">case</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token number">4'b0000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0010</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0011</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0100</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token number">4'b0101</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0110</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">|</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0111</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token punctuation">;</span>        <span class="token number">4'b1000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token number">4'b1001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">endcase</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token comment">//加法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>      <span class="token comment">//减法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>minus_b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现多工作模式的FLS"><a href="#实现多工作模式的FLS" class="headerlink" title="实现多工作模式的FLS"></a><span id="2">实现多工作模式的FLS</span></h2><p>代码严格遵循三段式有限状态机描述。<br>先给出具体实现：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> <span class="token function">fls</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span> rst<span class="token punctuation">,</span> <span class="token comment">//时钟，复位（高电平有效）</span>    <span class="token keyword">input</span> en<span class="token punctuation">,</span> <span class="token comment">//输入输出使能</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d<span class="token punctuation">,</span> <span class="token comment">//输入数列初始项</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> f<span class="token punctuation">,</span> <span class="token comment">//输出数列</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> of       <span class="token comment">//溢出</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func_cs<span class="token punctuation">,</span>func_ns<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> curr_state<span class="token punctuation">,</span> next_state<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> f_ls<span class="token punctuation">,</span> f_cs<span class="token punctuation">,</span> f_ns<span class="token punctuation">;</span>     <span class="token comment">//F(n-1),F(n),F(n+1)</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">;</span>           <span class="token comment">//ALU输出端口</span>    <span class="token keyword">wire</span> of_state<span class="token punctuation">;</span>    <span class="token keyword">reg</span> en_cs<span class="token punctuation">,</span> en_ns<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            curr_state<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_ns<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> en_cs<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token comment">//每按下一次button</span>            curr_state<span class="token operator">&lt;=</span>next_state<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        en_ns<span class="token operator">=</span>en<span class="token punctuation">;</span>        func_ns<span class="token operator">=</span>func_cs<span class="token punctuation">;</span>        <span class="token function">case</span><span class="token punctuation">(</span>curr_state<span class="token punctuation">)</span>        <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>func_ns<span class="token operator">=</span>d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//工作模式输入</span>        <span class="token keyword">end</span>        <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span>d<span class="token punctuation">;</span>        <span class="token comment">//第一项输入</span>        <span class="token keyword">end</span>        <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span>d<span class="token punctuation">;</span>        <span class="token comment">//第二项输入</span>        <span class="token keyword">end</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span>y<span class="token punctuation">;</span>        <span class="token comment">//第二项之后的项</span>        <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>        <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            f_cs<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            f_ls<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            en_cs<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_ns<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> en_cs<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token comment">//每按下一次button</span>            f_ls<span class="token operator">&lt;=</span>f_cs<span class="token punctuation">;</span>            f_cs<span class="token operator">&lt;=</span>f_ns<span class="token punctuation">;</span>            en_cs<span class="token operator">&lt;=</span>en_ns<span class="token punctuation">;</span>            func_cs<span class="token operator">&lt;=</span>func_ns<span class="token punctuation">;</span>            of<span class="token operator">&lt;=</span>of_state<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> en_cs<span class="token operator">&lt;=</span>en_ns<span class="token punctuation">;</span>    <span class="token keyword">end</span>    alu #<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token function">alu_inst</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>f_ls<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>f_cs<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>func_cs<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>of_state<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> f<span class="token operator">=</span>f_cs<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过分时复用依次输入func、FLS的前两项，之后状态机会一直工作在S3（状态编号3）:F(n)&#x3D;F(n-1)+F(n-2)。每按下一次en更新一次状态。rst为高电平时同步复位，状态回到S0。</p><h2 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a><span id="3">仿真</span></h2><h3 id="仿真代码"><a href="#仿真代码" class="headerlink" title="仿真代码"></a><span id="3.1">仿真代码</span></h3><p>vscode上编写好设计文件后，可以通过testbench插件（需要Python3的支持）快速生成仿真文件，可以将自动生成的内容复制到tb文件中。</p><img src="/2023/04/05/22462/tb.png" class title="testbench截图"><p><strong>注意：</strong> 生成的内容只是帮你创建和初始化了端口变量，并例化了模块，真正的测试内容需要自行添加。<br>插件只是帮你完成一些必需且繁琐的步骤，它并不会知道你想如何测试。所以你们可以自行添加一些测试数据，以下是一个示例：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span>  <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> <span class="token function">tb_fls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// fls Parameters</span><span class="token keyword">parameter</span> PERIOD  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// fls Inputs</span><span class="token keyword">reg</span>   clk                                  <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">reg</span>   rst                                  <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token comment">//先重置刀状态0</span><span class="token keyword">reg</span>   en                                   <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">reg</span>   <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  d                             <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token comment">// fls Outputs</span><span class="token keyword">wire</span>  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  f                             <span class="token punctuation">;</span><span class="token keyword">wire</span>  of                                   <span class="token punctuation">;</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token keyword">forever</span> #<span class="token punctuation">(</span>PERIOD<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>  clk<span class="token operator">=~</span>clk<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token keyword">forever</span> <span class="token number">#20</span>  en<span class="token operator">=~</span>en<span class="token punctuation">;</span><span class="token keyword">end</span>fls  u_fls <span class="token punctuation">(</span>    <span class="token punctuation">.</span>clk                     <span class="token punctuation">(</span> clk        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>rst                     <span class="token punctuation">(</span> rst        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>en                      <span class="token punctuation">(</span> en         <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>d                       <span class="token punctuation">(</span> d    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>f                       <span class="token punctuation">(</span> f    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>of                      <span class="token punctuation">(</span> of         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token number">#10</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token number">#10</span> d<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment">//异或模式</span>    <span class="token number">#50</span> d<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">;</span>    <span class="token number">#50</span> d<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span>    <span class="token number">#50</span> d<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token number">#550</span> rst<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token number">#30</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$finish</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a><span id="3.2">仿真结果</span></h3><p>加法模式：</p><img src="/2023/04/05/22462/plus.png" class title="加法模式仿真图"><p>减法模式：</p><img src="/2023/04/05/22462/minus.png" class title="减法模式仿真图"><p>异或模式:</p><img src="/2023/04/05/22462/xor.png" class title="异或模式仿真图"><p>其他工作模式自行测试！</p><h2 id="FPGA烧写"><a href="#FPGA烧写" class="headerlink" title="FPGA烧写"></a><span id="4">FPGA烧写</span></h2><p><strong>约束文件：</strong></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">## This file is a general <span class="token punctuation">.</span>xdc <span class="token keyword">for</span> FPGAOL_BOARD <span class="token punctuation">(</span>adopted from Nexys4 DDR Rev<span class="token punctuation">.</span> C<span class="token punctuation">)</span>## To <span class="token keyword">use</span> it in a project<span class="token punctuation">:</span>## <span class="token operator">-</span> uncomment the lines corresponding to used pins## <span class="token operator">-</span> rename the used ports <span class="token punctuation">(</span>in each line<span class="token punctuation">,</span> after get_ports<span class="token punctuation">)</span> according to the top level signal names in the project## Clock signalset_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E3    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> clk <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L12P_T1_MRCC_35 Sch<span class="token operator">=</span>clk100mhz#create_clock <span class="token operator">-</span>add <span class="token operator">-</span>name sys_clk_pin <span class="token operator">-</span>period <span class="token number">10.00</span> <span class="token operator">-</span>waveform <span class="token operator">&#123;</span><span class="token number">0</span> <span class="token number">5</span><span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span>CLK100MHZ<span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL LED <span class="token punctuation">(</span>signle<span class="token operator">-</span>digit<span class="token operator">-</span>SEGPLAY<span class="token punctuation">)</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN C17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN F18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> of <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL SWITCHset_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D14   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN F16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN H14   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN F13   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G13   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN H16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> rst <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL HEXPLAY#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A14   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A13   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A15   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN B17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_an<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN B16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_an<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_an<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL BUTTON <span class="token operator">&amp;</span> SOFT_CLOCKset_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN B18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> en <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>##USB<span class="token operator">-</span>RS232 Interface#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN C4    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_TXD_IN <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L7P_T1_AD6P_35 Sch<span class="token operator">=</span>uart_txd_in#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D4    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_RXD_OUT <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L11N_T1_SRCC_35 Sch<span class="token operator">=</span>uart_rxd_out#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D3    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_CTS <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L12N_T1_MRCC_35 Sch<span class="token operator">=</span>uart_cts#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E5    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_RTS <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L5N_T0_AD13N_35 Sch<span class="token operator">=</span>uart_rts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>烧写:</strong><br>然后在Vivado中点击左下角PROGRAM AND DEBUG&#x2F;Generate Bitstream可生成bit文件，所在目录：工程文件夹&#x2F;.runs&#x2F;impl_1&#x2F;***.bit。将其烧写在<a href="https://fpgaol.ustc.edu.cn/">FPGA在线平台</a>上即可远程控制真实的电路板。</p>]]></content>
      
      
      <categories>
          
          <category> COD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
