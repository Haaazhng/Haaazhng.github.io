<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>流水线CPU设计</title>
      <link href="/2023/05/25/22463.html"/>
      <url>/2023/05/25/22463.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次设计基于单周期CPU的实现，请先移步了解笔者另一篇博客：<a href="/2023/05/25/22462.html" title="单周期CPU设计">单周期CPU设计</a><br>单周期CPU在一个时钟周期内执行一条指令，这就意味着在这个时钟周期中，每个模块只在一小段时间内做了“有意义”的工作，而其余的时间都是空闲的。这显然是对CPU性能的极大浪费，不可容忍，难以饶恕！我们很容易联想到工厂的流水线，类似的，我们使CPU也“流水线”化。所以我们将其分为五个流水线单元：IF，ID，EX，MEM，WB。</p><ul><li>IF（Instruction Fetch，取指令），核心耗时为指令存储器的读取。</li><li>ID（Instruction Decode，译码），包含将指令翻译为各个控制信号并读取寄存器堆，核心耗时为寄存器堆的读取。</li><li>EX（Execution，执行），由算术逻辑单元ALU进行运算，得到指令的计算结果，同时计算可能需要的跳转地址，核心耗时为ALU计算。</li><li>MEM（Memory，访存），对数据存储器进行读取或写入，核心耗时为数据存储器的读写。</li><li>WB（Write Back，回写），将需要写回寄存器堆的数据写入。注意此处耗时与数据存储器写入一样，只考虑准备的时间，因为实际写入是在时钟上升沿进行的。</li></ul><p>五个单元各司其职，这样就避免了某个模块在工作的时候其余模块在偷懒。所以，本次实验的内容就是在<a href="/2023/05/25/22462.html" title="单周期CPU">单周期CPU</a>的基础上设计和实现五级流水线CPU，使其支持以下10条指令的功能：add、addi、lui、auipc、beq、blt、jal、jalr、lw、sw<br>数据通路为：</p><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251653450.png"><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251452541.png"><p>以下为部分模块的的设计思路。</p><h3 id="控制中枢Ctrl："><a href="#控制中枢Ctrl：" class="headerlink" title="控制中枢Ctrl："></a>控制中枢Ctrl：</h3><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251431064.png"><p>为了配合处理数据冒险，我们又添加了寄存器读使能信号：rf_re0和rf_re1。当该指令需要读取寄存器的值且该寄存器不是x0时rf_re赋值为1，否则等于0。rf_re会在冒险处理模块Hazard中发挥作用。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">//rf_re0信号</span><span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inst_type<span class="token operator">==</span>Add<span class="token operator">||</span>inst_type<span class="token operator">==</span>Addi<span class="token operator">||</span>inst_type<span class="token operator">==</span>Lw<span class="token operator">||</span>inst_type<span class="token operator">==</span>Sw<span class="token operator">||</span>inst_type<span class="token operator">==</span>Beq<span class="token operator">||</span>inst_type<span class="token operator">==</span>Blt<span class="token operator">||</span>inst_type<span class="token operator">==</span>Jalr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inst<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    rf_re0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> rf_re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//rf_re1信号</span><span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inst_type<span class="token operator">==</span>Add<span class="token operator">||</span>inst_type<span class="token operator">==</span>Sw<span class="token operator">||</span>inst_type<span class="token operator">==</span>Beq<span class="token operator">||</span>inst_type<span class="token operator">==</span>Blt<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inst<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    rf_re1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> rf_re1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作为段间寄存器的PC："><a href="#作为段间寄存器的PC：" class="headerlink" title="作为段间寄存器的PC："></a>作为段间寄存器的PC：</h3><p>添加一个控制信号stall，当stall高电平时，PC模块暂停一个时钟周期，即保持pc_cur值不变。</p><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251433278.png"><h3 id="寄存器文件RF："><a href="#寄存器文件RF：" class="headerlink" title="寄存器文件RF："></a>寄存器文件RF：</h3><p>当某个寄存器的值同时被写入和被读取时，为了使读取到正确的寄存器值，需要修改RF模块为Write First工作模式。我们添加一个always@(*)组合逻辑，使读取的值跳过寄存器而直接从写入值wd处接收值，即直接令rd&#x3D;wd。我们知道，当目标寄存器是x0而正在写入的值不为0时，并不会改变x0的值。但如果此时我们按照上面的策略，会给rd赋一个错误的值，所以我们再加上一个条件判断：wa!&#x3D;0。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">begin</span>     <span class="token comment">//Write First实现</span>    <span class="token function">if</span><span class="token punctuation">(</span>we<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> wa<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> wa<span class="token operator">==</span>ra0<span class="token punctuation">)</span>        rd0 <span class="token operator">=</span> wd<span class="token punctuation">;</span>    <span class="token keyword">else</span> rd0 <span class="token operator">=</span> Regfile<span class="token punctuation">[</span>ra0<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">if</span><span class="token punctuation">(</span>we<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> wa<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> wa<span class="token operator">==</span>ra1<span class="token punctuation">)</span>        rd1 <span class="token operator">=</span> wd<span class="token punctuation">;</span>    <span class="token keyword">else</span> rd1 <span class="token operator">=</span> Regfile<span class="token punctuation">[</span>ra1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="段间寄存器SEG-REG："><a href="#段间寄存器SEG-REG：" class="headerlink" title="段间寄存器SEG_REG："></a>段间寄存器SEG_REG：</h3><p>out信号的值取决于控制信号flush和stall。当flush有效时，所有out信号等于0；否则当stall信号有效时，out信号的值都保持不变；若stall和flush信号都无效（为0），则每个out信号的值等于对应的in信号，这也是一般情况下的结果，前两种情况是对冒险的处理。</p><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251455037.png"><h3 id="冒险处理Hazard："><a href="#冒险处理Hazard：" class="headerlink" title="冒险处理Hazard："></a>冒险处理Hazard：</h3><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251454029.png"><p><strong>结构冒险：</strong>由于我们采用哈佛结构，即指令存储器和数据存储器分开，所以不存在结构冒险。<br><strong>数据冒险：</strong>当MEM&#x2F;WB段正在执行的指令会向某寄存器写入结果（此时还未写入），但EX阶段的指令又需要该寄存器的值作为源操作数时，该指令在ID阶段从register file中读取的原始值就已经“过时”，这就是数据冒险。要得到正确的结果，则需要使用更新的源操作数，解决方法为将MEM&#x2F;WB段的即将写入的值前递给EX段作为更新的源操作数。根据rf_wd_sel的值有多个可能前递值：alu_ans，pc_add4，从数据存储器中读取的值，imm。对于WB段值的前递直接选择rf_wd_wb即可，因为这就是已经经过选择器的即将写入寄存器的值，但如果是MEM段值的前递呢？此时要写入的值还未经过选择器选择。但我们可以由rf_wd_sel_mem这个选择信号来帮助我们选择。对于选择alu_ans_mem，pc_add4_mem，imm_mem这三种情况的处理是容易的，但如果是数据存储器读取值呢？我们会发现在MEM段无法前递，必须到达WB段才能前递。所以我们必须要用一个stall信号，使IF，ID，EX段暂停一个时钟周期，并用flush_mem信号使MEM段清空。在下一个时钟周期MEM段的指令会执行到WB段，这时就能检测到前递了。<br>以下为rd0的非数据存储器读取结果前递的数据冒险处理，rd1同rd0。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// rd0数据冒险检测</span>        <span class="token comment">// MEM段前递，非数据存储器读取结果</span>        <span class="token function">if</span><span class="token punctuation">(</span>rf_we_mem <span class="token operator">&amp;&amp;</span> rf_re0_ex <span class="token operator">&amp;&amp;</span> rf_wa_mem<span class="token operator">==</span>rf_ra0_ex <span class="token operator">&amp;&amp;</span> rf_wd_sel_mem<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>            rf_rd0_fe<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            rf_rd0_fd<span class="token operator">=</span>alu_ans_mem<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>rf_we_mem <span class="token operator">&amp;&amp;</span> rf_re0_ex <span class="token operator">&amp;&amp;</span> rf_wa_mem<span class="token operator">==</span>rf_ra0_ex <span class="token operator">&amp;&amp;</span> rf_wd_sel_mem<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>            rf_rd0_fe<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            rf_rd0_fd<span class="token operator">=</span>pc_add4_mem<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>rf_we_mem <span class="token operator">&amp;&amp;</span> rf_re0_ex <span class="token operator">&amp;&amp;</span> rf_wa_mem<span class="token operator">==</span>rf_ra0_ex <span class="token operator">&amp;&amp;</span> rf_wd_sel_mem<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">begin</span>            rf_rd0_fe<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            rf_rd0_fd<span class="token operator">=</span>imm_mem<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token comment">// WB段前递</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>rf_we_wb <span class="token operator">&amp;&amp;</span> rf_re0_ex <span class="token operator">&amp;&amp;</span> rf_wa_wb<span class="token operator">==</span>rf_ra0_ex <span class="token punctuation">)</span><span class="token keyword">begin</span>            rf_rd0_fe<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            rf_rd0_fd<span class="token operator">=</span>rf_wd_wb<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token comment">// 不选择前递</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>            rf_rd0_fe<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            rf_rd0_fd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MEM段需要前递数据存储器读取结果的处理</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// MEM段检测到要前递数据存储器读取结果</span><span class="token function">if</span><span class="token punctuation">(</span>rf_we_mem <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rf_re1_ex <span class="token operator">&amp;&amp;</span> rf_wa_mem<span class="token operator">==</span>rf_ra1_ex<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>rf_re0_ex <span class="token operator">&amp;&amp;</span> rf_wa_mem<span class="token operator">==</span>rf_ra0_ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rf_wd_sel_mem<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    stall_if<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    stall_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    stall_ex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    flush_mem<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">else</span> <span class="token keyword">begin</span>    stall_if<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    stall_id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    stall_ex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    flush_mem<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>控制冒险：</strong>对于分支跳转指令beq，blt，jalr，它们在EX阶段计算出跳转地址。如果预测失败，则需要在下一个时钟周期清空IF&#x2F;ID，ID&#x2F;EX段间寄存器，我们分别将这两个段间寄存器的控制信号flush_id，flush_ex置位1。对于控制提前到ID阶段的jal指令的冒险处理在后面讨论。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token function">if</span><span class="token punctuation">(</span>pc_sel_ex<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> pc_sel_ex<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">begin</span>       <span class="token comment">//EX阶段的jalr和branch指令跳转</span>    flush_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    flush_ex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>pc_sel_ex<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> jal_id<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">begin</span>       <span class="token comment">// jal指令提前到ID阶段增加的冒险检测</span>    flush_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    flush_ex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">else</span> <span class="token keyword">begin</span>    flush_id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    flush_ex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将控制提前到ID阶段的jal指令的处理："><a href="#将控制提前到ID阶段的jal指令的处理：" class="headerlink" title="将控制提前到ID阶段的jal指令的处理："></a>将控制提前到ID阶段的jal指令的处理：</h3><p><strong>注意</strong>：此做法会对开头给出的数据通路作出小的改变，主要体现在：pc_next的选择由四选一选择器改为了NPC_SEL模块，冒险模块增加了将jal指令提前后，与EX段的分支跳转指令产生的控制冒险的处理。</p><p>你也可以选择不将jal指令的控制提前，只需要按照原数据通路例化模块和连线。</p><p>jal指令的跳转地址等于pc+imm，所以我们在ID段添加一个加法器得到jal跳转地址pc_jal_id。我们知道，对于EX段产生的控制跳转预测失败时，需要清空IF&#x2F;ID和ID&#x2F;EX段间寄存器，那如果是在ID段控制跳转的jal指令呢？我们只需要清空IF&#x2F;ID段间寄存器，该冒险在Hazard模块中完成，Hazard模块需添加jal_id端口输入。<br>jal的跳转控制信号jal_id由ctrl产生，但是当jal_id有效时不可不假思索的直接跳转，因为可能会有控制冒险：此时EX段是一个jalr指令或预测失败branch指令。由于这个指令先于jal指令，故也应该优先执行EX的分支跳转指令。只有当EX不是分支跳转指令或是预测成功的分支跳转指令时，才可执行ID段的jal控制跳转指令。我们创建模块NPC_SEL模块处理该冒险，具体如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">NPC_SEL</span><span class="token punctuation">(</span>        <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_add4_if<span class="token punctuation">,</span>        <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_jalr_ex<span class="token punctuation">,</span>        <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> alu_ans_ex<span class="token punctuation">,</span>        <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_jal_id<span class="token punctuation">,</span>        <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_sel_ex<span class="token punctuation">,</span>        <span class="token keyword">input</span> jal_id<span class="token punctuation">,</span>        <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_next    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>pc_sel_ex<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment">//EX段的分支跳转优先</span>            pc_next<span class="token operator">=</span>pc_jalr_ex<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>pc_sel_ex<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            pc_next<span class="token operator">=</span>alu_ans_ex<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>pc_sel_ex<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> jal_id<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//提前到ID段的jal跳转</span>            pc_next<span class="token operator">=</span>pc_jal_id<span class="token punctuation">;</span>        <span class="token keyword">else</span> pc_next<span class="token operator">=</span>pc_add4_if<span class="token punctuation">;</span>            <span class="token comment">//不跳转</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了使执行到EX阶段的jal不二次跳转，我们在Encoder例化时给输入端口jal赋0即可。</p><h2 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h2><p>若IF段延迟为300ps，ID段延迟200ps，EX段延迟150ps，MEM段延迟350ps，WB段延迟250ps，那么流水线CPU的最短时钟周期为350ps，平均条指令用时一个时钟周期350ps，而单周期CPU的最短周期为1250ps，每条指令用时一个时钟周期1250ps。流水线CPU比单周期CPU耗时少72%，可见流水线CPU大大提高了CPU的性能。</p><h2 id="7-10更新"><a href="#7-10更新" class="headerlink" title="7.10更新"></a>7.10更新</h2><p>实现了RV-32I 所有非系统指令和RV-32M乘除法指令。<br>除以上十条指令外，还包括<br>算数与逻辑指令：sll、slli、srl、srli、sra、srai、sub、xor、xori、or、ori、and、andi<br>分支与条件指令：bne、bge、bltu、bgeu、slt、slti、slti、sltiu<br>访存指令6：lb、lh、lbu、lhu、sb、sh<br>乘除法指令：mul、mulh、mulhu、mulhsu、div、divu、rem、remu</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><strong>算术、逻辑与条件指令</strong><br>这些指令的数据通路基本一致，大同小异，实现较为简单，主要区别在于alu_func选择信号不同，并且都是将ALU计算结果存入寄存器。需要添加算术右移操作以处理sra和srai。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token function">case</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token number">4'b0000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0010</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0011</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0100</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token number">4'b0101</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0110</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">|</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0111</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token punctuation">;</span>        <span class="token number">4'b1000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token number">4'b1001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>        <span class="token number">4'b1010</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token kernel-function property">$signed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>>></span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">endcase</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在CTRL译码模块中依据指令类型选择alu_func控制信号即可。</p><p><strong>分支指令</strong></p><p>分支指令新增了bne、bge、bltu、bgeu四条，数据通路与原来流水线中的beq、blt数据通路一致，重点在于修改Branch模块，添加这四种信号的处理：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">case</span> <span class="token punctuation">(</span>br_type<span class="token punctuation">)</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//blt</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//beq</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">==</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bne</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">!=</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bge</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bltu</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">&lt;</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bgeu</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">>=</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>         <span class="token keyword">endcase</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>访存指令</strong></p><p>增加了六条访存指令lb、lbu、lh、lhu、sb、sh。对于原来的流水线CPU实现，由于只实现lw和sw，为了实现的简便，我们例化的数据存储器IP核的数据宽度设置为了4bytes，因为lw和sw都是对连续四个字节的访问。但不同于lw和sw，这六条指令中lb，lbu，sb指令只涉及到一个字节的访问，而另外三条则只涉及到两个字节的访问。此时如果仍然以原存储器进行设计，不论我们想访问的是几个字节，都只能以四个字节为单位进行。所以很容易想到的一种实现方式是，如果要读取一个字节（lb，lbu），则将整个4字节读取出来，根据地址低2位选择处理结果，读取两个字节时（lh、lhu）类推。但如果是存储呢（sb、sh）？因为必须以四字节为一个单位进行存储，也按这种实现方式存储务必会覆盖另一些地址中的原数据，这种情况我们当然是不愿意看到的。所以我们又会自然而然的想到把整个四字节先读出来，再根据地址低2位更改相应byte而不动其他数据，然后再存进去，这样可行？理论上是可行的，但在实际情况中，由于访存指令需要大量时钟周期，如果采用上面的二次读取写入的的做法，会使CPU性能“雪上加霜”，大大提高CPI，这就得不偿失了。所以，我采用了另一种方法，那就是将原来的一个数据宽度为4Bytes的数据存储器，拆分为四个数据宽度为1Byte的数据存储器dm1，dm2，dm3，dm4。对于每一个dm_addr[9:2]，这四个数据存储器中对应地址的数据共4Bytes共同组成一个字。当访问一个字节时，再根据dm_addr[1:0]对相应的某一个或两个或四个dm进行访问。这样就很好的解决了前面讨论的问题。具体代码实现：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        we1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        we2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        we3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        we4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        wd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        dm_dout<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>access_type<span class="token punctuation">)</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//lb指令</span>                <span class="token function">case</span><span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token number">0</span><span class="token punctuation">:</span>dm_dout<span class="token operator">=&#123;&#123;</span><span class="token number">24</span><span class="token operator">&#123;</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                <span class="token number">1</span><span class="token punctuation">:</span>dm_dout<span class="token operator">=&#123;&#123;</span><span class="token number">24</span><span class="token operator">&#123;</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                <span class="token number">2</span><span class="token punctuation">:</span>dm_dout<span class="token operator">=&#123;&#123;</span><span class="token number">24</span><span class="token operator">&#123;</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>dm_dout<span class="token operator">=&#123;&#123;</span><span class="token number">24</span><span class="token operator">&#123;</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">endcase</span>            <span class="token keyword">end</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//lh指令，偶数字节对齐</span>                <span class="token function">if</span><span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    dm_dout<span class="token operator">=&#123;&#123;</span><span class="token number">16</span><span class="token operator">&#123;</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> dm_dout<span class="token operator">=&#123;&#123;</span><span class="token number">16</span><span class="token operator">&#123;</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//lbu指令</span>                <span class="token keyword">case</span> <span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token number">0</span><span class="token punctuation">:</span> dm_dout<span class="token operator">=&#123;</span><span class="token number">24'b0</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                    <span class="token number">1</span><span class="token punctuation">:</span> dm_dout<span class="token operator">=&#123;</span><span class="token number">24'b0</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                    <span class="token number">2</span><span class="token punctuation">:</span> dm_dout<span class="token operator">=&#123;</span><span class="token number">24'b0</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>  dm_dout<span class="token operator">=&#123;</span><span class="token number">24'b0</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">endcase</span>            <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span>         <span class="token comment">//lhu指令，偶数字节对齐</span>                <span class="token function">if</span><span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    dm_dout<span class="token operator">=&#123;</span><span class="token number">16'b0</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> dm_dout<span class="token operator">=&#123;</span><span class="token number">16'b0</span><span class="token punctuation">,</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4</span><span class="token punctuation">:</span> dm_dout<span class="token operator">=</span>dm_out_tmp<span class="token punctuation">;</span>      <span class="token comment">//lw指令</span>            <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span>         <span class="token comment">//sb指令</span>                <span class="token keyword">case</span> <span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                        we1<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>        <span class="token comment">//Not MMIO</span>                        wd<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dm_din<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                        we2<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                        wd<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span>dm_din<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                        we3<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                        wd<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span>dm_din<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                        we4<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                        wd<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">=</span>dm_din<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                <span class="token keyword">endcase</span>            <span class="token keyword">end</span>             <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//sh指令地址偶数字节对齐</span>                <span class="token function">if</span><span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    we3<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                    we4<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                    wd<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span>dm_din<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token keyword">else</span> <span class="token keyword">begin</span>                    we1<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                    we2<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                    wd<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dm_din<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>             <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>      <span class="token comment">//sw指令</span>                we1<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                we2<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                we3<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                we4<span class="token operator">=</span>dm_we<span class="token punctuation">;</span>                wd<span class="token operator">=</span>dm_din<span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    ROM inst_mem <span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>im_addr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// input wire [9 : 0] a</span>        <span class="token punctuation">.</span><span class="token function">spo</span><span class="token punctuation">(</span>im_dout<span class="token punctuation">)</span>  <span class="token comment">// output wire [31 : 0] spo</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    DPRAM1 dm1 <span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// input wire [7 : 0] a</span>        <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>wd<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment">// input wire [7 : 0] d</span>        <span class="token punctuation">.</span><span class="token function">dpra</span><span class="token punctuation">(</span>mem_check_addr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// input wire [7 : 0] dpra</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// input wire clk</span>        <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we1<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// input wire we</span>        <span class="token punctuation">.</span><span class="token function">spo</span><span class="token punctuation">(</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// output wire [7 : 0] spo</span>        <span class="token punctuation">.</span><span class="token function">dpo</span><span class="token punctuation">(</span>mem_check_data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// output wire [7 : 0] dpo</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    DPRAM1 dm2 <span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// input wire [7 : 0] a</span>        <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>wd<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment">// input wire [7 : 0] d</span>        <span class="token punctuation">.</span><span class="token function">dpra</span><span class="token punctuation">(</span>mem_check_addr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// input wire [7 : 0] dpra</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// input wire clk</span>        <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we2<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// input wire we</span>        <span class="token punctuation">.</span><span class="token function">spo</span><span class="token punctuation">(</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// output wire [7 : 0] spo</span>        <span class="token punctuation">.</span><span class="token function">dpo</span><span class="token punctuation">(</span>mem_check_data<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// output wire [7 : 0] dpo</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    DPRAM1 dm3 <span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// input wire [7 : 0] a</span>        <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>wd<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment">// input wire [7 : 0] d</span>        <span class="token punctuation">.</span><span class="token function">dpra</span><span class="token punctuation">(</span>mem_check_addr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// input wire [7 : 0] dpra</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// input wire clk</span>        <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we3<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// input wire we</span>        <span class="token punctuation">.</span><span class="token function">spo</span><span class="token punctuation">(</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// output wire [7 : 0] spo</span>        <span class="token punctuation">.</span><span class="token function">dpo</span><span class="token punctuation">(</span>mem_check_data<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// output wire [7 : 0] dpo</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    DPRAM1 dm4 <span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>dm_addr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// input wire [7 : 0] a</span>        <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>wd<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment">// input wire [7 : 0] d</span>        <span class="token punctuation">.</span><span class="token function">dpra</span><span class="token punctuation">(</span>mem_check_addr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// input wire [7 : 0] dpra</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// input wire clk</span>        <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we4<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// input wire we</span>        <span class="token punctuation">.</span><span class="token function">spo</span><span class="token punctuation">(</span>dm_out_tmp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// output wire [7 : 0] spo</span>        <span class="token punctuation">.</span><span class="token function">dpo</span><span class="token punctuation">(</span>mem_check_data<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// output wire [7 : 0] dpo</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lb，lbu，lh，lhu和lw一样存在需要在MEM段前递的冒险，处理也和lw指令一样，将IF、ID、EX停顿。这样虽然在下一个时钟周期能够检测到wb段Load指令的前递了，但假如原来同时需要MEM段Load指令的前递和WB段的前递，这种处理还是会得到错误的值，因为它将原WB段的前递冲刷掉了。所以我们在WB段后添加一个寄存器寄存上个时钟周期WB跟前递相关的值，然后在Hazard模块中增加对上述冒险的处理，选择该寄存器的值作为前递即可。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Wd_reg_wb</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rf_wd_wb<span class="token punctuation">,</span>    <span class="token keyword">input</span> rf_we_wb<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rf_wa_wb<span class="token punctuation">,</span>    <span class="token keyword">input</span> stall_reg<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> rf_we_reg<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rf_wa_reg<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wd_wb_fd_reg    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>stall_reg<span class="token punctuation">)</span><span class="token keyword">begin</span>            wd_wb_fd_reg<span class="token operator">&lt;=</span>wd_wb_fd_reg<span class="token punctuation">;</span>            rf_we_reg<span class="token operator">&lt;=</span>rf_we_reg<span class="token punctuation">;</span>            rf_wa_reg<span class="token operator">&lt;=</span>rf_wa_reg<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>            wd_wb_fd_reg<span class="token operator">&lt;=</span>rf_wd_wb<span class="token punctuation">;</span>            rf_we_reg<span class="token operator">&lt;=</span>rf_we_wb<span class="token punctuation">;</span>            rf_wa_reg<span class="token operator">&lt;=</span>rf_wa_wb<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>rf_we_reg <span class="token operator">&amp;&amp;</span> rf_re1_ex <span class="token operator">&amp;&amp;</span> rf_wa_reg<span class="token operator">==</span>rf_ra1_ex<span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token comment">//冲刷掉的WB段的原前递</span>            rf_rd1_fe<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            rf_rd1_fd<span class="token operator">=</span>wd_wb_fd_reg<span class="token punctuation">;</span>        <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>乘法器设计</strong></p><p>乘法器可以用组合电路来完成，但如果在一个时钟周期内完成，就可能带来高延迟，所以我们将其分为两个部分，用两级流水线完成计算：在EX段完成2位Booth编码和伪华莱士树计算，得出最后两个数，在MEM段将这两个64bit位宽的数据相加得到乘法结果。<br>Booth编码：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Booth_Encoder</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> x<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> res     <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                res<span class="token operator">=</span>x<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                res<span class="token operator">=</span>x<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                res<span class="token operator">=</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                res<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                res<span class="token operator">=~</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                res<span class="token operator">=~</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保留进位加法器：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">CSA</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> c<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cout    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> s<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token operator">^</span>c<span class="token punctuation">;</span>    <span class="token keyword">assign</span> cout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token operator">&amp;</span>b<span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">~</span>b<span class="token operator">&amp;</span>a<span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">~</span>c<span class="token operator">&amp;</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在伪华莱士树模块中，例化17个Booth_Encoder模块将32个部分和装化为17个部分和，为什么不是16个？我们将32bit拓展为34bit，由于乘数可能是无符号数，这时如果第32位为1，则将第33、34置为0。这时根据这17个编码值构造6层的伪华莱士树，共例化15个保留进位加法器CSA，最后得到最后两个部分和，将这两个数传入MEM得出和，即为结果。在实现过程中我们看到，乘法指令需要再MEM段才能算出结果，类似Load指令的数据冒险，当EX段的指令需要正在MEM段的乘法指令的计算结果的前递时，需要将IF、ID、EX段停顿一个周期。当MEM段的乘法指令执行到WB段就能检测到前递了。</p><p><strong>移位除法器设计</strong><br>初始时，先根据除法指令类型（Div or Rem or Divu or Remu）以及被除数和除数的符号，记录计算结果的符号，在计算完毕时，再恢复符号。由于移位除法器不能组合化，需要多个时钟周期完成，故需要和流水线进行握手，在Hazard模块中完成。移位除法器计数器cnt初始化值为32，每个时钟周期减1，将cnt传入Hazard模块中，cnt！&#x3D;-1且判断EX段指令类型为除法时，将stall_if、stall_id、stall_ex、stall_mem、stall_wb都设置为1，整个流水线停顿等待除法计算完成。减为-1时说明计算完成，流水线正常执行。注意到每个除法指令固定执行34个周期，移位33次，当被除数较小时，可以将前导0去除，可以降低移位次数，从而降低停顿次数，提升CPU性能。我们使用对数器完成提前启动：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">assign</span> minus<span class="token operator">=</span>rq<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">-&#123;</span><span class="token number">1'b0</span><span class="token punctuation">,</span>abs_divisor<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span><span class="token keyword">assign</span> oor<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=|</span>abs_divident<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">assign</span> oor<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=|</span>d16<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">assign</span> oor<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=|</span>d8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">assign</span> oor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=|</span>d4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">assign</span> d16<span class="token operator">=</span><span class="token punctuation">(</span>oor<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">?</span> abs_divident<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span>abs_divident<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> d8<span class="token operator">=</span><span class="token punctuation">(</span>oor<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">?</span> d16<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span>d16<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> d4<span class="token operator">=</span><span class="token punctuation">(</span>oor<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">?</span> d8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>d8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> d2<span class="token operator">=</span><span class="token punctuation">(</span>oor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span> d4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>d4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">assign</span> add2<span class="token operator">=</span><span class="token punctuation">(</span>d2<span class="token operator">==</span><span class="token number">3</span><span class="token operator">?</span> <span class="token number">2</span><span class="token punctuation">:</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> tmp<span class="token operator">=&#123;</span>oor<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1'b0</span><span class="token operator">&#125;</span><span class="token punctuation">;</span><span class="token keyword">assign</span> log<span class="token operator">=</span><span class="token punctuation">(</span>abs_divident<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span>add2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//log为提前启动取得的对数上整</span><span class="token keyword">assign</span> pre_divident<span class="token operator">=</span>abs_divident<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//将被除数先左移32-log位，去除前导0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并将计数器cnt初始化为取得的对数上整（log）。<br>除法器状态机实现：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        cs<span class="token operator">&lt;=</span>ns<span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>ns<span class="token operator">==</span>Shift<span class="token punctuation">)</span>            cnt_ns<span class="token operator">&lt;=</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> cnt_ns<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>minus<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> ns<span class="token operator">==</span>Shift<span class="token punctuation">)</span>       <span class="token comment">//余数与除数差小于0</span>            rq_ns<span class="token operator">&lt;=</span>rq<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> rq_ns<span class="token operator">&lt;=&#123;</span>minus<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rq<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1'b1</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>cnt<span class="token operator">!=</span><span class="token number">6'b111111</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cal_ans_sel<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>cal_ans_sel<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> flush_mem<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>             ns<span class="token operator">=</span>Shift<span class="token punctuation">;</span>         <span class="token keyword">else</span> ns<span class="token operator">=</span>Init<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>cs<span class="token operator">==</span>Init<span class="token punctuation">)</span><span class="token keyword">begin</span>            rq<span class="token operator">=&#123;</span><span class="token number">33'b0</span><span class="token punctuation">,</span>pre_divident<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            cnt<span class="token operator">=</span>log<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>            rq<span class="token operator">=</span>rq_ns<span class="token punctuation">;</span>            cnt<span class="token operator">=</span>cnt_ns<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一种存在的数据冒险是MEM段正在执行的乘法指令或Load指令，而EX段的除法指令需要MEM段的前递，通过前面的讨论我们知道这种情况需要在下一个周期将IF、ID、EX停顿，冲刷MEM，正常执行WB，但EX段的除法又需要将五个部分都停顿，这不就矛盾了？正确的处理方法是：优先执行前者，因为除法指令需要等待MEM段的乘法或Load执行到WB段才能得到正确的前递值，此时的EX段停顿，RQ寄存器还不能进行移位操作，所以下一状态仍然是Init。再过一个时钟周期，得到正确的前递了，EX段的除法器可以正常进行了。<br>还有一种冒险，跟上一个冒险的条件相同，但EX段的除法指令同时需要MEM段的乘法或Load指令结果前递，和WB段的前递。如下列指令</p><pre class="line-numbers language-risc-v" data-language="risc-v"><code class="language-risc-v">addi t4 x0 199mul t3 t0 t1        # mul停顿冲刷t4前递的冒险检测验证divu t2 t3 t4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在前面讨论的冒险处理的基础上，在下一个周期会同时得到WB段mul的前递，和寄存在WB后面的寄存器Wd_Reg_wb里的被冲刷的原WB数据addi的前递。看起来好像没什么问题，还是正确的得到了前递结果。但再过一个时钟周期呢？这时Wd_Reg_wb寄存器里的wd_wb_fd_reg寄存的值就由addi指令的值变成了mul的值，中途除法器的除数变了，所以也会的到一个错误结果。解决方法就是EX段除法器让五个流水线级停顿时，让Wd_Reg_wb寄存器也停顿，从而保证中途除法器源操作数不被篡改。</p>]]></content>
      
      
      <categories>
          
          <category> COD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> RISC-V </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单周期CPU设计</title>
      <link href="/2023/05/25/22462.html"/>
      <url>/2023/05/25/22462.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>单周期CPU，即在一个时钟周期内将一条指令执行完后再开始执行下一条指令的CPU。要想设计好单周期CPU，最重要的一点是要深入且准确的理解每条指令在数据通路中的路径。在此前提下，我们将数据通路中的各个模块封装，使用结构化的方式设计CPU，即在CPU得到顶层模块中例化各个模块。数据通路如下所示：</p><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/life_reco/202305251649977.png"><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251245837.png"><p>实现了RISC_V 32位指令集架构下的21种指令add、addi、xor、or、and、lui、auipc、lw、sw、jal、jalr、sll、slli、srl、srli、beq、bne、blt、bge、bltu、bgeu<br>数据通路中有一些用于debug的模块和连线，大家可以自己实现debug模块，也可将这些部分删除，只完成一个CPU。<br>下面是部分核心模块的具体代码实现。</p><h3 id="IMM生成器"><a href="#IMM生成器" class="headerlink" title="IMM生成器"></a>IMM生成器</h3><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251517801.png"><p>传入的参数imm_type指定了需要生成的立即数类型，我们根据这个来处理立即数。一共有六种立即数 ：R，I，S，B，U，J。更准确的说imm_type指示的是执行的指令类型，因为R型指令并不需要立即数，我们把它放在case语句的default语句里默认输出立即数为0，其实这个默认值并不重要，它不会影响指令的执行结果，因为立即数作为输入之一的选择器会选择其他需要的信号。这些选择器其实就是alu_op2_sel和reg_write_sel，即立即数既可能作为ALU操作数的输入（显然的），又可能需要写入目标寄存器（lui）指令。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Immediate</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> inst<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> imm_type<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> imm    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">parameter</span> R_type<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> I_type<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> S_type<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>  B_type<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> U_type<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> J_type<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>imm_type<span class="token punctuation">)</span>            I_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span><span class="token number">20</span><span class="token operator">&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             S_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span><span class="token number">20</span><span class="token operator">&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             B_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span><span class="token number">20</span><span class="token operator">&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1'b0</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             U_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">&#125;</span><span class="token punctuation">,</span> <span class="token operator">&#123;</span><span class="token number">12</span><span class="token operator">&#123;</span><span class="token number">1'b0</span><span class="token operator">&#125;&#125;&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             J_type<span class="token punctuation">:</span><span class="token keyword">begin</span>                imm<span class="token operator">=&#123;&#123;</span><span class="token number">12</span><span class="token operator">&#123;</span>inst<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">&#125;&#125;</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inst<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1'b0</span><span class="token operator">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                imm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Control模块"><a href="#Control模块" class="headerlink" title="Control模块"></a>Control模块</h3><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251518713.png"><p>这是至关重要的一个模块，它是整个CPU的控制中枢。前面说过，我们需要理解每一条指令在数据通中的路径，否则，Control模块就无从入手。这个模块设计多个控制信号的产生。为了更加脉络清晰、条理分明的完成这个部分，我制作出了21条指令的对应的控制信号表格：</p><table width="500" border="2">    <tr align="center">        <th>\</th>        <th>jal</th>        <th>jalr</th>        <th>br_type</th>        <th>wb_en</th>        <th>wb_sel</th>        <th>alu_op1_sel</th>        <th>alu_op2_sel</th>        <th>alu_ctrl</th>        <th>imm_type</th>        <th>mem_wb_en</th>    </tr>    <tr align="center">        <th>add</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>srl</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1000</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>sll</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1001</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>or</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0110</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>and</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0101</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>xor</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0111</th>        <th>R</th>        <th>0</th>    </tr>        <tr align="center">        <th>jal</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>J</th>        <th>0</th>    </tr>    <tr align="center">        <th>addi</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>I</th>        <th>0</th>    </tr>        <tr align="center">        <th>jalr</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>I</th>        <th>0</th>    </tr>    <tr align="center">        <th>slli</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1001</th>        <th>I</th>        <th>0</th>    </tr>    <tr align="center">        <th>srli</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1000</th>        <th>I</th>        <th>0</th>    </tr>    <tr align="center">        <th>blt</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>beq</th>        <th>0</th>        <th>0</th>        <th>2</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>bne</th>        <th>0</th>        <th>0</th>        <th>3</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>bge</th>        <th>0</th>        <th>0</th>        <th>4</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>bltu</th>        <th>0</th>        <th>0</th>        <th>5</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>bgeu</th>        <th>0</th>        <th>0</th>        <th>6</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>B</th>        <th>0</th>    </tr>    <tr align="center">        <th>auipc</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>1</th>        <th>1</th>        <th>0</th>        <th>U</th>        <th>0</th>    </tr>    <tr align="center">        <th>lui</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>3</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>U</th>        <th>0</th>    </tr>    <tr align="center">        <th>lw</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>2</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>I</th>        <th>0</th>    </tr>    <tr align="center">        <th>sw</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>0</th>        <th>1</th>        <th>0</th>        <th>S</th>        <th>1</th>    </tr></table><p>我们可以观察到，对于大多数控制信号，某个值都占了半数以上。这个值我们可以在每个信号的对应case语句中的default部分默认赋值，甚至用if~else就可以完成一个信号的赋值，这样就减少了代码量。</p><h3 id="Branch分支模块"><a href="#Branch分支模块" class="headerlink" title="Branch分支模块"></a>Branch分支模块</h3><p>当指令是一个分支指令时，该模块就可以根据控制模块发出的br_type信号处理比较op1和op2，然后输出br跳转信号。br会输入到下一指令地址选择模块中（NPC_SEL）。我们一共有六种跳转指令，其中有两个是无符号比较bltu和bgeu，两个有符号比较blt和bge，而bne和beq无所谓有符号或无符号比较，因为都能输出期望结果。需要注意的是Verilog中的比较逻辑默认是无符号比较，对于blt和bge指令，需要用$signed()来指示操作数其是一个有符号数。经过比较后，若需要跳转，则br&#x3D;1，否则br&#x3D;0。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> Branch <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> br_type<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> op1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> op2<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> br<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>br_type<span class="token punctuation">)</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//blt</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//beq</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">==</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bne</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">!=</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bge</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bltu</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">&lt;</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span>     <span class="token comment">//bgeu</span>                <span class="token function">if</span><span class="token punctuation">(</span>op1 <span class="token operator">>=</span> op2<span class="token punctuation">)</span> br<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>             <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                br<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>         <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NPC-SEL选择模块"><a href="#NPC-SEL选择模块" class="headerlink" title="NPC_SEL选择模块"></a>NPC_SEL选择模块</h3><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202305251519335.png"><p>这个模块的作用是选择下一个需要执行指令的地址。这个的选择取决于jal、jalr和br信号，皆高电平有效，Control模块对信号的处理决定了这三个信号在同一时间或都无效，或有且只有一个有效。对于jal和br信号，它们选择的都是同一个输入：pc_jal_br。因为它们的跳转地址都是pc+imm；这个值由ALU计算得出，所以输入端口pc_jal_br外接alu_res。jalr有效时，跳转地址是rd0+imm，同样由ALU计算得出。jalr比jal和branch指令多一个与操作。如果三个信号都无效，即无需跳转，所以程序按顺序执行下一条指令，选择器选择pc_add4作为pc_next的值。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> NPC_SEL <span class="token punctuation">(</span>    <span class="token keyword">input</span> jal<span class="token punctuation">,</span>    <span class="token keyword">input</span> jalr<span class="token punctuation">,</span>    <span class="token keyword">input</span> br<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_add4<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_jal_br<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_jalr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>jal<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> br<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            pc_next<span class="token operator">=</span>pc_jal_br<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>jalr<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            pc_next<span class="token operator">=</span>pc_jalr<span class="token punctuation">;</span>        <span class="token keyword">else</span> pc_next<span class="token operator">=</span>pc_add4<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算术逻辑单元ALU：代码如下，of为加减法运算的溢出标志信号，由于我们不需要考虑这种情况，故例化时将of信号悬空即可。<br>ALU的其他应用实例可参考另一篇文章：<a href="/2023/04/05/22462.html" title="ALU的硬件编程实现及其应用">ALU的硬件编程实现及其应用</a></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> ALU <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>     <span class="token comment">//两操作数（对于减运算，a是被减数）</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>           <span class="token comment">//操作功能（加、减、与、或、异或等）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>       <span class="token comment">//运算结果（和、差 …）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> of<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minus_b<span class="token punctuation">;</span><span class="token keyword">assign</span> minus_b<span class="token operator">=~</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//a-b=a+(-b)</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">case</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token number">4'b0000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0010</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0011</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0100</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token number">4'b0101</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0110</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">|</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0111</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token punctuation">;</span>        <span class="token number">4'b1000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token number">4'b1001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">endcase</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token comment">//加法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>      <span class="token comment">//减法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">==</span>minus_b<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有众多其他小模块，原理很简单，不一一赘述了，下面给出它们的实现：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">PC</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> rst<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_next<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc_cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span>            pc_cur<span class="token operator">&lt;=</span><span class="token number">32'h2ffc</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            pc_cur<span class="token operator">&lt;=</span>pc_next<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> RF             <span class="token comment">//三端口32 xWIDTH寄存器堆</span><span class="token punctuation">(</span>       <span class="token keyword">input</span> clk<span class="token punctuation">,</span>                      <span class="token comment">//时钟（上升沿有效）</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span>               <span class="token comment">//读端口0地址</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span>      <span class="token comment">//读端口0数据</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> ra1<span class="token punctuation">,</span>                <span class="token comment">//读端口1地址</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> rd1<span class="token punctuation">,</span>      <span class="token comment">//读端口1数据</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra_dbg<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd_dbg<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> wa<span class="token punctuation">,</span>                <span class="token comment">//写端口地址</span>    <span class="token keyword">input</span> we<span class="token punctuation">,</span>                       <span class="token comment">//写使能，高电平有效</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> wd         <span class="token comment">//写端口数据</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> Regfile<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">integer</span> i<span class="token punctuation">;</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        Regfile<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32'b0</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        Regfile<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32'h2ffc</span><span class="token punctuation">;</span>        Regfile<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32'h1800</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span>  rd0 <span class="token operator">=</span> Regfile<span class="token punctuation">[</span>ra0<span class="token punctuation">]</span><span class="token punctuation">,</span>            rd1 <span class="token operator">=</span> Regfile<span class="token punctuation">[</span>ra1<span class="token punctuation">]</span><span class="token punctuation">,</span>            rd_dbg <span class="token operator">=</span> Regfile<span class="token punctuation">[</span>ra_dbg<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        Regfile<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>we<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> wa<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> Regfile<span class="token punctuation">[</span>wa<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> wd<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> <span class="token function">ADD</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> lhs<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rhs<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> res <span class="token operator">=</span> lhs <span class="token operator">+</span> rhs<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> <span class="token function">AND</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> lhs<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rhs<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> res <span class="token operator">=</span> lhs <span class="token operator">&amp;</span> rhs<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> MUX1 <span class="token punctuation">(</span>    <span class="token keyword">input</span> sel<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src0<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span>            res<span class="token operator">=</span>src1<span class="token punctuation">;</span>        <span class="token keyword">else</span>             res<span class="token operator">=</span>src0<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> MUX2 <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> sel<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src0<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src2<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> src3<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>sel<span class="token punctuation">)</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                res<span class="token operator">=</span>src0<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                res<span class="token operator">=</span>src1<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                res<span class="token operator">=</span>src2<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                res<span class="token operator">=</span>src3<span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再根据数据通路，在<em>CPU.v</em>设计文件中将这些模块一一例化，并将每个模块的端口正确连线，就大功告成了！</p>]]></content>
      
      
      <categories>
          
          <category> COD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> RISC-V </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用寄存器堆设计FIFO队列</title>
      <link href="/2023/04/14/22462.html"/>
      <url>/2023/04/14/22462.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h2><p><strong>定义</strong><br>FIFO队列，即First in first out，与Last in first out 的LIFO栈相对。<br><strong>特点</strong><br>没有外部读写地址线，数据由内部读写指针自动加一完成。<br><strong>分类</strong><br>分为同步FIFO和异步FIFO。同步FIFO的读与写使用同一个时钟，常用于同步时钟的数据缓存。异步FIFO的读与写相互独立，用于跨时钟的数据信号的传递。</p><h2 id="端口说明"><a href="#端口说明" class="headerlink" title="端口说明"></a>端口说明</h2><p>以下为FIFO模块的框图：</p><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202304141419447.png"><p>clk,rst：时钟与复位信号<br>deq,enq：出入队使能信号，高电平有效，一次即允许操作一项数据<br>out,in：出&#x2F;入队数据<br>full,empty：队满&#x2F;空信号<br>an,seg：数码管控制信号，显示队列数据</p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p>采用结构化的方式描述和实现电路。将电路分为队列控制单元LCU、寄存器堆RF和数码管显示单元SDU。内部信号valid[7:0]指示对应寄存器数据是否有效，即是否在队列中。</p><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202304141427155.png"><h2 id="LCU设计"><a href="#LCU设计" class="headerlink" title="LCU设计"></a>LCU设计</h2><p>我们对一些核心代码进行分析。<br>首先我们需要对deq和enq信号进行处理，代码如下，分别使用三个寄存器来获得有效信号（高电平）只延续单个时钟周期长度的de_p，en_p。如此处理既减少了亚稳态的出现，又保证了出入队信号不会同时有效（互斥），且时状态机的实现更为简单。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//出入队使能信号处理</span>    de_st<span class="token operator">&lt;=</span>deq<span class="token punctuation">;</span>    en_st<span class="token operator">&lt;=</span>enq<span class="token punctuation">;</span>    de_s<span class="token operator">&lt;=</span>de_st<span class="token punctuation">;</span>    en_s<span class="token operator">&lt;=</span>en_st<span class="token punctuation">;</span>    de_pt<span class="token operator">&lt;=</span>de_s<span class="token punctuation">;</span>    en_pt<span class="token operator">&lt;=</span>en_s<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">assign</span> de_p<span class="token operator">=</span>de_s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>de_pt<span class="token punctuation">)</span><span class="token punctuation">,</span>en_p<span class="token operator">=</span>en_s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>en_pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后处理队满&#x2F;空信号：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> empty<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//队空</span>    <span class="token keyword">else</span> empty<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">if</span><span class="token punctuation">(</span>wp<span class="token operator">==</span>rp <span class="token operator">&amp;&amp;</span> valid <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> full<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//队满</span>    <span class="token keyword">else</span> full<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当valid的值为0时，说明无有效数据，即队列空，此时wp&#x3D;rp；而当读指针rp与写指针wp值相同，且valid不为零时，说明队列满。</p><p>最后时三段式有限状态机的实现：、</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//时序逻辑</span>    <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>        curr_state<span class="token operator">&lt;=</span>IDLE<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> curr_state<span class="token operator">&lt;=</span>next_state<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>de_p<span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>empty<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> next_state<span class="token operator">=</span>DEQU<span class="token punctuation">;</span>       <span class="token comment">//出队信号有效且队列不空</span>        <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>           <span class="token comment">//队列空</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_p<span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>full<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> next_state<span class="token operator">=</span>ENQU<span class="token punctuation">;</span>        <span class="token comment">//入队信号有效且队列未满</span>        <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>               <span class="token comment">//队列满</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>       <span class="token comment">//根据状态更新写/读使能信号</span>    <span class="token function">case</span><span class="token punctuation">(</span>curr_state<span class="token punctuation">)</span>    ENQU<span class="token punctuation">:</span><span class="token keyword">begin</span>        we<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    DEQU<span class="token punctuation">:</span><span class="token keyword">begin</span>        we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        re0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    IDLE<span class="token punctuation">:</span><span class="token keyword">begin</span>        we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>        we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">endcase</span><span class="token keyword">end</span><span class="token keyword">assign</span> wd<span class="token operator">=</span>in<span class="token punctuation">,</span>wa<span class="token operator">=</span>wp<span class="token punctuation">;</span><span class="token keyword">assign</span> ra0<span class="token operator">=</span>rp<span class="token punctuation">,</span>out<span class="token operator">=</span>rd0<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便描述与控制，我们给寄存器堆增加了读使能信号re。在状态机第三部分，根据当前状态值来令给读使能信号re0和写使能信号we赋值，从而实现对寄存器的读取与写入。</p><p>对于读写指针，我们需要使指针能够从0~7循环移动。直接给出LCU完整代码：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">LCU</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span> rst<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span>    <span class="token keyword">input</span> enq<span class="token punctuation">,</span>    <span class="token keyword">input</span> deq<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> empty<span class="token punctuation">,</span>full<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wa<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wd<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> we<span class="token punctuation">,</span>re0<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> valid    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">parameter</span> IDLE <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> ENQU <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span> DEQU <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">//状态值</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> curr_state<span class="token punctuation">,</span>next_state<span class="token punctuation">;</span>    <span class="token keyword">reg</span> de_st<span class="token punctuation">,</span>de_s<span class="token punctuation">,</span>de_pt<span class="token punctuation">,</span>en_st<span class="token punctuation">,</span>en_s<span class="token punctuation">,</span>en_pt<span class="token punctuation">;</span>    <span class="token keyword">wire</span> de_p<span class="token punctuation">,</span>en_p<span class="token punctuation">;</span>                             <span class="token comment">//出入队信号处理</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wp<span class="token punctuation">,</span>rp<span class="token punctuation">,</span>wp_ns<span class="token punctuation">,</span>rp_ns<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//时序逻辑</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            curr_state<span class="token operator">&lt;=</span>IDLE<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> curr_state<span class="token operator">&lt;=</span>next_state<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>de_p<span class="token punctuation">)</span><span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>empty<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> next_state<span class="token operator">=</span>DEQU<span class="token punctuation">;</span>       <span class="token comment">//出队信号有效且队列不空</span>            <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>           <span class="token comment">//队列空</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_p<span class="token punctuation">)</span><span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>full<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> next_state<span class="token operator">=</span>ENQU<span class="token punctuation">;</span>        <span class="token comment">//入队信号有效且队列未满</span>            <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>               <span class="token comment">//队列满</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> next_state<span class="token operator">=</span>IDLE<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//更新指针</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            wp<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            rp<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>            wp<span class="token operator">&lt;=</span>wp_ns<span class="token punctuation">;</span>            rp<span class="token operator">&lt;=</span>rp_ns<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>curr_state<span class="token operator">==</span>ENQU<span class="token punctuation">)</span><span class="token keyword">begin</span>       <span class="token comment">//将入队时，更新写指针</span>        <span class="token function">case</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">7</span><span class="token punctuation">:</span><span class="token keyword">begin</span> wp_ns<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">end</span>        <span class="token keyword">endcase</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> wp_ns<span class="token operator">=</span>wp<span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>curr_state<span class="token operator">==</span>DEQU<span class="token punctuation">)</span><span class="token keyword">begin</span>       <span class="token comment">//将出队时，更新读指针</span>        <span class="token function">case</span><span class="token punctuation">(</span>rp<span class="token punctuation">)</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token keyword">end</span>            <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span> <span class="token keyword">end</span>             <span class="token number">7</span><span class="token punctuation">:</span><span class="token keyword">begin</span> rp_ns<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">end</span>        <span class="token keyword">endcase</span>             <span class="token keyword">end</span>        <span class="token keyword">else</span> rp_ns<span class="token operator">=</span>rp<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>       <span class="token comment">//根据状态更新写/读使能信号</span>        <span class="token function">case</span><span class="token punctuation">(</span>curr_state<span class="token punctuation">)</span>        ENQU<span class="token punctuation">:</span><span class="token keyword">begin</span>            we<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        DEQU<span class="token punctuation">:</span><span class="token keyword">begin</span>            we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            re0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        IDLE<span class="token punctuation">:</span><span class="token keyword">begin</span>            we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            we<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            re0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> wd<span class="token operator">=</span>in<span class="token punctuation">,</span>wa<span class="token operator">=</span>wp<span class="token punctuation">;</span>    <span class="token keyword">assign</span> ra0<span class="token operator">=</span>rp<span class="token punctuation">,</span>out<span class="token operator">=</span>rd0<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>     <span class="token comment">//更改valid对应值</span>        <span class="token function">if</span><span class="token punctuation">(</span>curr_state<span class="token operator">==</span>DEQU<span class="token punctuation">)</span>            valid<span class="token punctuation">[</span>rp<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>curr_state<span class="token operator">==</span>ENQU<span class="token punctuation">)</span>            valid<span class="token punctuation">[</span>wp<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span>            valid<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> empty<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//队空</span>        <span class="token keyword">else</span> empty<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>wp<span class="token operator">==</span>rp <span class="token operator">&amp;&amp;</span> valid <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> full<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//队满</span>        <span class="token keyword">else</span> full<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>         <span class="token comment">//出入队使能信号处理</span>        de_st<span class="token operator">&lt;=</span>deq<span class="token punctuation">;</span>        en_st<span class="token operator">&lt;=</span>enq<span class="token punctuation">;</span>        de_s<span class="token operator">&lt;=</span>de_st<span class="token punctuation">;</span>        en_s<span class="token operator">&lt;=</span>en_st<span class="token punctuation">;</span>        de_pt<span class="token operator">&lt;=</span>de_s<span class="token punctuation">;</span>        en_pt<span class="token operator">&lt;=</span>en_s<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> de_p<span class="token operator">=</span>de_s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>de_pt<span class="token punctuation">)</span><span class="token punctuation">,</span>en_p<span class="token operator">=</span>en_s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>en_pt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RF设计"><a href="#RF设计" class="headerlink" title="RF设计"></a>RF设计</h2><p>re0和re1是我们为了方便LCU模块的实现添加的两个读使能端口。读端口2连接在SDU模块，因此我们需要在顶层模块中令re1恒为1。请注意，由于寄存器堆的x0寄存器硬编程值为0，因此当该寄存器在队列中时，写入的数据始终无效。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> RF             <span class="token comment">//三端口32 xWIDTH寄存器堆</span><span class="token punctuation">(</span>       <span class="token keyword">input</span> clk<span class="token punctuation">,</span>                      <span class="token comment">//时钟（上升沿有效）</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span>               <span class="token comment">//读端口0地址</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span>      <span class="token comment">//读端口0数据</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> ra1<span class="token punctuation">,</span>                <span class="token comment">//读端口1地址</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> rd1<span class="token punctuation">,</span>      <span class="token comment">//读端口1数据</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> wa<span class="token punctuation">,</span>                <span class="token comment">//写端口地址</span>    <span class="token keyword">input</span> we<span class="token punctuation">,</span>                       <span class="token comment">//写使能，高电平有效</span>    <span class="token keyword">input</span> re0<span class="token punctuation">,</span>re1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> wd         <span class="token comment">//写端口数据</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> regfile<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        regfile<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>re0<span class="token punctuation">)</span><span class="token keyword">begin</span>            rd0 <span class="token operator">=</span> regfile<span class="token punctuation">[</span>ra0<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token function">if</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token keyword">begin</span>            rd1 <span class="token operator">=</span> regfile<span class="token punctuation">[</span>ra1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>we<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> wa<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> regfile<span class="token punctuation">[</span>wa<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> wd<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SDU设计"><a href="#SDU设计" class="headerlink" title="SDU设计"></a>SDU设计</h2><p>该模块的功能是将队列中的有效数据输出在八个数码管中的对应位置。即将valid值不为0的寄存器数据（也即队列数据，队列数据则是存储在寄存器堆中的）输出在数码管。这里使用了时分复用的方式依次显示。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> SDU <span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> valid<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> an<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//分时复用计数</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        cnt<span class="token operator">&lt;=</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>       <span class="token comment">//队空时，显示第一个元素（0）</span>            an<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            ra1<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>          <span class="token comment">//不为空时</span>            <span class="token function">case</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>   <span class="token comment">//显示队列中的元素</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">4</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">5</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">6</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">7</span><span class="token punctuation">:</span><span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>                    ra1<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>                    an<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token keyword">endcase</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> seg<span class="token operator">=</span>rd1<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Top模块"><a href="#Top模块" class="headerlink" title="Top模块"></a>Top模块</h2><p>由于我们使用了结构化方式实现电路，因此我们只需要在顶层模块中建立好内部变量，并分别例化LCU、SDU、RF模块即可。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> fifo <span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span> rst<span class="token punctuation">,</span>         <span class="token comment">//时钟（上升沿有效）、同步复位（高电平有效）</span>    <span class="token keyword">input</span> enq<span class="token punctuation">,</span>              <span class="token comment">//入队列使能，高电平有效</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span>         <span class="token comment">//入队列数据</span>    <span class="token keyword">input</span> deq<span class="token punctuation">,</span>              <span class="token comment">//出队列使能，高电平有效</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out<span class="token punctuation">,</span>       <span class="token comment">//出队列数据</span>    <span class="token keyword">output</span> full<span class="token punctuation">,</span>empty<span class="token punctuation">,</span>      <span class="token comment">//队列满和空标志</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> an<span class="token punctuation">,</span>        <span class="token comment">//数码管选择</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg        <span class="token comment">//数码管数据</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span>ra1<span class="token punctuation">,</span>wa<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span>rd1<span class="token punctuation">,</span>wd<span class="token punctuation">;</span>    <span class="token keyword">wire</span> we<span class="token punctuation">,</span>re0<span class="token punctuation">,</span>re1<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> valid<span class="token punctuation">;</span>     <span class="token keyword">assign</span> re1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    LCU <span class="token function">lcu_inst</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">rst</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">enq</span><span class="token punctuation">(</span>enq<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">deq</span><span class="token punctuation">(</span>deq<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">full</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">re0</span><span class="token punctuation">(</span>re0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">rd0</span><span class="token punctuation">(</span>rd0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">ra0</span><span class="token punctuation">(</span>ra0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">wd</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">wa</span><span class="token punctuation">(</span>wa<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    SDU <span class="token function">sdu_inst</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">rd1</span><span class="token punctuation">(</span>rd1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">ra1</span><span class="token punctuation">(</span>ra1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">an</span><span class="token punctuation">(</span>an<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">seg</span><span class="token punctuation">(</span>seg<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    RF <span class="token function">rf_inst</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">ra0</span><span class="token punctuation">(</span>ra0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">ra1</span><span class="token punctuation">(</span>ra1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">wa</span><span class="token punctuation">(</span>wa<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">rd0</span><span class="token punctuation">(</span>rd0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">rd1</span><span class="token punctuation">(</span>rd1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">re0</span><span class="token punctuation">(</span>re0<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">re1</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">wd</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>以上便是FIFO信号的完整设计与实现，大家自行编写仿真文件进行仿真和编写约束文件生成bit流烧写在fpga平台。其实Vivado中已经给我们提供众多的ip核，相当于Vivado已经给我们写好了很多常用或复杂的模块，我们需要时只需要找到对应的ip核并对其例化即可。其中就包括了分布式存储器和块式存储器，大家可尝试通过例化ip核来代替RF模块。<br><img src="https://gcore.jsdelivr.net/gh/Haaazhng/images/img/202304141514518.png"></p>]]></content>
      
      
      <categories>
          
          <category> COD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ALU的硬件编程实现及其应用</title>
      <link href="/2023/04/05/22462.html"/>
      <url>/2023/04/05/22462.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-ALU的实现"><a href="#1-ALU的实现" class="headerlink" title="1.ALU的实现"></a><a href="#1">1.ALU的实现</a></h2><h2 id="2-实现多工作模式的FLS"><a href="#2-实现多工作模式的FLS" class="headerlink" title="2.实现多工作模式的FLS"></a><a href="#2">2.实现多工作模式的FLS</a></h2><h2 id="3-仿真"><a href="#3-仿真" class="headerlink" title="3.仿真"></a><a href="#3">3.仿真</a></h2><h3 id="3-1-仿真代码"><a href="#3-1-仿真代码" class="headerlink" title="3.1.仿真代码"></a><a href="#3.1">3.1.仿真代码</a></h3><h3 id="3-2-仿真结果"><a href="#3-2-仿真结果" class="headerlink" title="3.2.仿真结果"></a><a href="#3.2">3.2.仿真结果</a></h3><h2 id="4-FPGA烧写"><a href="#4-FPGA烧写" class="headerlink" title="4.FPGA烧写"></a><a href="#4">4.FPGA烧写</a></h2><h2 id="ALU的实现"><a href="#ALU的实现" class="headerlink" title="ALU的实现"></a><span id="1">ALU的实现</span></h2><p><strong>ALU端口定义：</strong></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> alu #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">6</span>） <span class="token comment">//数据宽度</span><span class="token punctuation">(</span><span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>  <span class="token comment">//两操作数（对于减运算，a是被减数）</span><span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>        <span class="token comment">//操作功能（加、减、与、或、异或等）</span><span class="token keyword">output</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>    <span class="token comment">//运算结果（和、差 …）</span><span class="token keyword">output</span> of                <span class="token comment">//溢出标志of，加减法结果溢出时置1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ALU所实现的<strong>功能</strong>：</p><img src="/2023/04/05/22462/grid.png" class title="ALU功能图"><p>可以直接通过组合逻辑<strong>实现：</strong></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> alu #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>     <span class="token comment">//两操作数（对于减运算，a是被减数）</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>           <span class="token comment">//操作功能（加、减、与、或、异或等）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>       <span class="token comment">//运算结果（和、差 …）</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> of<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minus_b<span class="token punctuation">;</span><span class="token keyword">assign</span> minus_b<span class="token operator">=~</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//a-b=a+(-b)</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">case</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token number">4'b0000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0010</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0011</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4'b0100</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token kernel-function property">$signed</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token number">4'b0101</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0110</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">|</span>b<span class="token punctuation">;</span>        <span class="token number">4'b0111</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token punctuation">;</span>        <span class="token number">4'b1000</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token number">4'b1001</span><span class="token punctuation">:</span>y<span class="token operator">=</span>a<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">endcase</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token comment">//加法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>func<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>      <span class="token comment">//减法运算溢出讨论</span>        <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>minus_b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>y<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            of<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token keyword">else</span> of<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现多工作模式的FLS"><a href="#实现多工作模式的FLS" class="headerlink" title="实现多工作模式的FLS"></a><span id="2">实现多工作模式的FLS</span></h2><p>代码严格遵循三段式有限状态机描述。<br>先给出具体实现：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> <span class="token function">fls</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span> rst<span class="token punctuation">,</span> <span class="token comment">//时钟，复位（高电平有效）</span>    <span class="token keyword">input</span> en<span class="token punctuation">,</span> <span class="token comment">//输入输出使能</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d<span class="token punctuation">,</span> <span class="token comment">//输入数列初始项</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> f<span class="token punctuation">,</span> <span class="token comment">//输出数列</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> of       <span class="token comment">//溢出</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func_cs<span class="token punctuation">,</span>func_ns<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> curr_state<span class="token punctuation">,</span> next_state<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> f_ls<span class="token punctuation">,</span> f_cs<span class="token punctuation">,</span> f_ns<span class="token punctuation">;</span>     <span class="token comment">//F(n-1),F(n),F(n+1)</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">;</span>           <span class="token comment">//ALU输出端口</span>    <span class="token keyword">wire</span> of_state<span class="token punctuation">;</span>    <span class="token keyword">reg</span> en_cs<span class="token punctuation">,</span> en_ns<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            curr_state<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_ns<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> en_cs<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token comment">//每按下一次button</span>            curr_state<span class="token operator">&lt;=</span>next_state<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        en_ns<span class="token operator">=</span>en<span class="token punctuation">;</span>        func_ns<span class="token operator">=</span>func_cs<span class="token punctuation">;</span>        <span class="token function">case</span><span class="token punctuation">(</span>curr_state<span class="token punctuation">)</span>        <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>func_ns<span class="token operator">=</span>d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//工作模式输入</span>        <span class="token keyword">end</span>        <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span>d<span class="token punctuation">;</span>        <span class="token comment">//第一项输入</span>        <span class="token keyword">end</span>        <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span>d<span class="token punctuation">;</span>        <span class="token comment">//第二项输入</span>        <span class="token keyword">end</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">begin</span>            next_state<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>f_ns<span class="token operator">=</span>y<span class="token punctuation">;</span>        <span class="token comment">//第二项之后的项</span>        <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>        <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>            f_cs<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            f_ls<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>            en_cs<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en_ns<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> en_cs<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token comment">//每按下一次button</span>            f_ls<span class="token operator">&lt;=</span>f_cs<span class="token punctuation">;</span>            f_cs<span class="token operator">&lt;=</span>f_ns<span class="token punctuation">;</span>            en_cs<span class="token operator">&lt;=</span>en_ns<span class="token punctuation">;</span>            func_cs<span class="token operator">&lt;=</span>func_ns<span class="token punctuation">;</span>            of<span class="token operator">&lt;=</span>of_state<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> en_cs<span class="token operator">&lt;=</span>en_ns<span class="token punctuation">;</span>    <span class="token keyword">end</span>    alu #<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token function">alu_inst</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>f_ls<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>f_cs<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>func_cs<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>of_state<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> f<span class="token operator">=</span>f_cs<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过分时复用依次输入func、FLS的前两项，之后状态机会一直工作在S3（状态编号3）:F(n)&#x3D;F(n-1)+F(n-2)。每按下一次en更新一次状态。rst为高电平时同步复位，状态回到S0。</p><h2 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a><span id="3">仿真</span></h2><h3 id="仿真代码"><a href="#仿真代码" class="headerlink" title="仿真代码"></a><span id="3.1">仿真代码</span></h3><p>vscode上编写好设计文件后，可以通过testbench插件（需要Python3的支持）快速生成仿真文件，可以将自动生成的内容复制到tb文件中。</p><img src="/2023/04/05/22462/tb.png" class title="testbench截图"><p><strong>注意：</strong> 生成的内容只是帮你创建和初始化了端口变量，并例化了模块，真正的测试内容需要自行添加。<br>插件只是帮你完成一些必需且繁琐的步骤，它并不会知道你想如何测试。所以你们可以自行添加一些测试数据，以下是一个示例：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span>  <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> <span class="token function">tb_fls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// fls Parameters</span><span class="token keyword">parameter</span> PERIOD  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// fls Inputs</span><span class="token keyword">reg</span>   clk                                  <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">reg</span>   rst                                  <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token comment">//先重置刀状态0</span><span class="token keyword">reg</span>   en                                   <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">reg</span>   <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  d                             <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token comment">// fls Outputs</span><span class="token keyword">wire</span>  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  f                             <span class="token punctuation">;</span><span class="token keyword">wire</span>  of                                   <span class="token punctuation">;</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token keyword">forever</span> #<span class="token punctuation">(</span>PERIOD<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>  clk<span class="token operator">=~</span>clk<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token keyword">forever</span> <span class="token number">#20</span>  en<span class="token operator">=~</span>en<span class="token punctuation">;</span><span class="token keyword">end</span>fls  u_fls <span class="token punctuation">(</span>    <span class="token punctuation">.</span>clk                     <span class="token punctuation">(</span> clk        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>rst                     <span class="token punctuation">(</span> rst        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>en                      <span class="token punctuation">(</span> en         <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>d                       <span class="token punctuation">(</span> d    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>f                       <span class="token punctuation">(</span> f    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>of                      <span class="token punctuation">(</span> of         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">initial</span><span class="token keyword">begin</span>    <span class="token number">#10</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token number">#10</span> d<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment">//异或模式</span>    <span class="token number">#50</span> d<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">;</span>    <span class="token number">#50</span> d<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span>    <span class="token number">#50</span> d<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token number">#550</span> rst<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token number">#30</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$finish</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a><span id="3.2">仿真结果</span></h3><p>加法模式：</p><img src="/2023/04/05/22462/plus.png" class title="加法模式仿真图"><p>减法模式：</p><img src="/2023/04/05/22462/minus.png" class title="减法模式仿真图"><p>异或模式:</p><img src="/2023/04/05/22462/xor.png" class title="异或模式仿真图"><p>其他工作模式自行测试！</p><h2 id="FPGA烧写"><a href="#FPGA烧写" class="headerlink" title="FPGA烧写"></a><span id="4">FPGA烧写</span></h2><p><strong>约束文件：</strong></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">## This file is a general <span class="token punctuation">.</span>xdc <span class="token keyword">for</span> FPGAOL_BOARD <span class="token punctuation">(</span>adopted from Nexys4 DDR Rev<span class="token punctuation">.</span> C<span class="token punctuation">)</span>## To <span class="token keyword">use</span> it in a project<span class="token punctuation">:</span>## <span class="token operator">-</span> uncomment the lines corresponding to used pins## <span class="token operator">-</span> rename the used ports <span class="token punctuation">(</span>in each line<span class="token punctuation">,</span> after get_ports<span class="token punctuation">)</span> according to the top level signal names in the project## Clock signalset_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E3    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> clk <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L12P_T1_MRCC_35 Sch<span class="token operator">=</span>clk100mhz#create_clock <span class="token operator">-</span>add <span class="token operator">-</span>name sys_clk_pin <span class="token operator">-</span>period <span class="token number">10.00</span> <span class="token operator">-</span>waveform <span class="token operator">&#123;</span><span class="token number">0</span> <span class="token number">5</span><span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span>CLK100MHZ<span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL LED <span class="token punctuation">(</span>signle<span class="token operator">-</span>digit<span class="token operator">-</span>SEGPLAY<span class="token punctuation">)</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN C17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN F18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> f<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> of <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL SWITCHset_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D14   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN F16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN H14   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN F13   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN G13   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> d<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN H16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> rst <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL HEXPLAY#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A14   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A13   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A15   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN B17   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_an<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN B16   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_an<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN A18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> hexplay_an<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>## FPGAOL BUTTON <span class="token operator">&amp;</span> SOFT_CLOCKset_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN B18   IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> en <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>##USB<span class="token operator">-</span>RS232 Interface#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN C4    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_TXD_IN <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L7P_T1_AD6P_35 Sch<span class="token operator">=</span>uart_txd_in#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D4    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_RXD_OUT <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L11N_T1_SRCC_35 Sch<span class="token operator">=</span>uart_rxd_out#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN D3    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_CTS <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L12N_T1_MRCC_35 Sch<span class="token operator">=</span>uart_cts#set_property <span class="token operator">-</span>dict <span class="token operator">&#123;</span> PACKAGE_PIN E5    IOSTANDARD LVCMOS33 <span class="token operator">&#125;</span> <span class="token punctuation">[</span>get_ports <span class="token operator">&#123;</span> UART_RTS <span class="token operator">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> #IO_L5N_T0_AD13N_35 Sch<span class="token operator">=</span>uart_rts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>烧写:</strong><br>然后在Vivado中点击左下角PROGRAM AND DEBUG&#x2F;Generate Bitstream可生成bit文件，所在目录：工程文件夹&#x2F;.runs&#x2F;impl_1&#x2F;***.bit。将其烧写在<a href="https://fpgaol.ustc.edu.cn/">FPGA在线平台</a>上即可远程控制真实的电路板。</p>]]></content>
      
      
      <categories>
          
          <category> COD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
