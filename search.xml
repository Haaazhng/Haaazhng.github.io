<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ALU的硬件编程实现及其应用</title>
      <link href="/2023/04/05/22462.html"/>
      <url>/2023/04/05/22462.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-ALU的实现"><a href="#1-ALU的实现" class="headerlink" title="1.ALU的实现"></a><a href="#1">1.ALU的实现</a></h2><h2 id="2-实现多工作模式的FLS"><a href="#2-实现多工作模式的FLS" class="headerlink" title="2.实现多工作模式的FLS"></a><a href="#2">2.实现多工作模式的FLS</a></h2><h2 id="3-仿真"><a href="#3-仿真" class="headerlink" title="3.仿真"></a><a href="#3">3.仿真</a></h2><h3 id="3-1-仿真代码"><a href="#3-1-仿真代码" class="headerlink" title="3.1.仿真代码"></a><a href="#3.1">3.1.仿真代码</a></h3><h3 id="3-2-仿真结果"><a href="#3-2-仿真结果" class="headerlink" title="3.2.仿真结果"></a><a href="#3.2">3.2.仿真结果</a></h3><h2 id="4-FPGA烧写"><a href="#4-FPGA烧写" class="headerlink" title="4.FPGA烧写"></a><a href="#4">4.FPGA烧写</a></h2><h2 id="ALU的实现"><a href="#ALU的实现" class="headerlink" title="ALU的实现"></a><span id="1">ALU的实现</span></h2><p><strong>ALU端口定义：</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu #(<span class="keyword">parameter</span> WIDTH = <span class="number">6</span>） <span class="comment">//数据宽度</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">input</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] a, b,  <span class="comment">//两操作数（对于减运算，a是被减数）</span></span><br><span class="line"><span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] func,        <span class="comment">//操作功能（加、减、与、或、异或等）</span></span><br><span class="line"><span class="keyword">output</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] y,    <span class="comment">//运算结果（和、差 …）</span></span><br><span class="line"><span class="keyword">output</span> of                <span class="comment">//溢出标志of，加减法结果溢出时置1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>ALU所实现的<strong>功能</strong>：</p><img src="/2023/04/05/22462/grid.png" class title="ALU功能图"><p>可以直接通过组合逻辑<strong>实现：</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu #(<span class="keyword">parameter</span> WIDTH = <span class="number">6</span>) (</span><br><span class="line">    <span class="keyword">input</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] a, b,     <span class="comment">//两操作数（对于减运算，a是被减数）</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] func,           <span class="comment">//操作功能（加、减、与、或、异或等）</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] y,       <span class="comment">//运算结果（和、差 …）</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> of</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] minus_b;</span><br><span class="line"><span class="keyword">assign</span> minus_b=~b+<span class="number">1</span>;    <span class="comment">//a-b=a+(-b)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(func)</span><br><span class="line">        <span class="number">4&#x27;b0000</span>:y=a+b;</span><br><span class="line">        <span class="number">4&#x27;b0001</span>:y=a-b;</span><br><span class="line">        <span class="number">4&#x27;b0010</span>:y=(a==b? <span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">        <span class="number">4&#x27;b0011</span>:y=(a&lt;b? <span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">        <span class="number">4&#x27;b0100</span>:y=(<span class="built_in">$signed</span> (a) &lt; <span class="built_in">$signed</span> (b) ? <span class="number">1</span>:<span class="number">0</span>) ;</span><br><span class="line">        <span class="number">4&#x27;b0101</span>:y=a&amp;b;</span><br><span class="line">        <span class="number">4&#x27;b0110</span>:y=a|b;</span><br><span class="line">        <span class="number">4&#x27;b0111</span>:y=a^b;</span><br><span class="line">        <span class="number">4&#x27;b1000</span>:y=a&gt;&gt;b;</span><br><span class="line">        <span class="number">4&#x27;b1001</span>:y=a&lt;&lt;b;</span><br><span class="line">        <span class="keyword">default</span>:y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(func==<span class="number">0</span>)<span class="keyword">begin</span>        <span class="comment">//加法运算溢出讨论</span></span><br><span class="line">        <span class="keyword">if</span>(a[WIDTH-<span class="number">1</span>]==b[WIDTH-<span class="number">1</span>] &amp;&amp; a[WIDTH-<span class="number">1</span>]^y[WIDTH-<span class="number">1</span>])</span><br><span class="line">            of=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> of=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(func==<span class="number">1</span>) <span class="keyword">begin</span>      <span class="comment">//减法运算溢出讨论</span></span><br><span class="line">        <span class="keyword">if</span>(a[WIDTH-<span class="number">1</span>]==minus_b[WIDTH-<span class="number">1</span>] &amp;&amp; a[WIDTH-<span class="number">1</span>]^y[WIDTH-<span class="number">1</span>])</span><br><span class="line">            of=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> of=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> of=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="实现多工作模式的FLS"><a href="#实现多工作模式的FLS" class="headerlink" title="实现多工作模式的FLS"></a><span id="2">实现多工作模式的FLS</span></h2><p>代码严格遵循三段式有限状态机描述。<br>先给出具体实现：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> fls(</span><br><span class="line">    <span class="keyword">input</span> clk, rst, <span class="comment">//时钟，复位（高电平有效）</span></span><br><span class="line">    <span class="keyword">input</span> en, <span class="comment">//输入输出使能</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">6</span>:<span class="number">0</span>] d, <span class="comment">//输入数列初始项</span></span><br><span class="line">    <span class="keyword">output</span> [<span class="number">6</span>:<span class="number">0</span>] f, <span class="comment">//输出数列</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> of       <span class="comment">//溢出</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] func_cs,func_ns;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] curr_state, next_state;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">0</span>] f_ls, f_cs, f_ns;     <span class="comment">//F(n-1),F(n),F(n+1)</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">6</span>:<span class="number">0</span>] y;           <span class="comment">//ALU输出端口</span></span><br><span class="line">    <span class="keyword">wire</span> of_state;</span><br><span class="line">    <span class="keyword">reg</span> en_cs, en_ns;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(rst) <span class="keyword">begin</span></span><br><span class="line">            curr_state&lt;=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(en_ns==<span class="number">1</span> &amp;&amp; en_cs==<span class="number">0</span>)<span class="keyword">begin</span>  <span class="comment">//每按下一次button</span></span><br><span class="line">            curr_state&lt;=next_state;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        en_ns=en;</span><br><span class="line">        func_ns=func_cs;</span><br><span class="line">        <span class="keyword">case</span>(curr_state)</span><br><span class="line">        <span class="number">0</span>:<span class="keyword">begin</span></span><br><span class="line">            next_state=<span class="number">1</span>;f_ns=<span class="number">0</span>;func_ns=d[<span class="number">3</span>:<span class="number">0</span>]; <span class="comment">//工作模式输入</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="number">1</span>:<span class="keyword">begin</span></span><br><span class="line">            next_state=<span class="number">2</span>;f_ns=d;        <span class="comment">//第一项输入</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="number">2</span>:<span class="keyword">begin</span></span><br><span class="line">            next_state=<span class="number">3</span>;f_ns=d;        <span class="comment">//第二项输入</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">default</span>:<span class="keyword">begin</span></span><br><span class="line">            next_state=<span class="number">3</span>;f_ns=y;        <span class="comment">//第二项之后的项</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(rst) <span class="keyword">begin</span></span><br><span class="line">            f_cs&lt;=<span class="number">0</span>;</span><br><span class="line">            f_ls&lt;=<span class="number">0</span>;</span><br><span class="line">            en_cs&lt;=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(en_ns==<span class="number">1</span> &amp;&amp; en_cs==<span class="number">0</span>)<span class="keyword">begin</span>  <span class="comment">//每按下一次button</span></span><br><span class="line">            f_ls&lt;=f_cs;</span><br><span class="line">            f_cs&lt;=f_ns;</span><br><span class="line">            en_cs&lt;=en_ns;</span><br><span class="line">            func_cs&lt;=func_ns;</span><br><span class="line">            of&lt;=of_state;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> en_cs&lt;=en_ns;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    alu <span class="variable">#(7)</span> alu_inst(</span><br><span class="line">        <span class="variable">.a</span>(f_ls),</span><br><span class="line">        <span class="variable">.b</span>(f_cs),</span><br><span class="line">        <span class="variable">.func</span>(func_cs),</span><br><span class="line">        <span class="variable">.y</span>(y),</span><br><span class="line">        <span class="variable">.of</span>(of_state)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> f=f_cs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们通过分时复用依次输入func、FLS的前两项，之后状态机会一直工作在S3（状态编号3）:F(n)&#x3D;F(n-1)+F(n-2)。每按下一次en更新一次状态。rst为高电平时同步复位，状态回到S0。</p><h2 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a><span id="3">仿真</span></h2><h3 id="仿真代码"><a href="#仿真代码" class="headerlink" title="仿真代码"></a><span id="3.1">仿真代码</span></h3><p>vscode上编写好设计文件后，可以通过testbench插件（需要Python3的支持）快速生成仿真文件，可以将自动生成的内容复制到tb文件中。</p><img src="/2023/04/05/22462/tb.png" class title="testbench截图"><p><strong>注意：</strong> 生成的内容只是帮你创建和初始化了端口变量，并例化了模块，真正的测试内容需要自行添加。<br>插件只是帮你完成一些必需且繁琐的步骤，它并不会知道你想如何测试。所以你们可以自行添加一些测试数据，以下是一个示例：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span>  1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_fls();</span><br><span class="line"></span><br><span class="line"><span class="comment">// fls Parameters</span></span><br><span class="line"><span class="keyword">parameter</span> PERIOD  = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// fls Inputs</span></span><br><span class="line"><span class="keyword">reg</span>   clk                                  = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">reg</span>   rst                                  = <span class="number">1</span> ;    <span class="comment">//先重置刀状态0</span></span><br><span class="line"><span class="keyword">reg</span>   en                                   = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">reg</span>   [<span class="number">6</span>:<span class="number">0</span>]  d                             = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fls Outputs</span></span><br><span class="line"><span class="keyword">wire</span>  [<span class="number">6</span>:<span class="number">0</span>]  f                             ;</span><br><span class="line"><span class="keyword">wire</span>  of                                   ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">forever</span> <span class="variable">#(PERIOD/2)</span>  clk=~clk;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">forever</span> #<span class="number">20</span>  en=~en;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">fls  u_fls (</span><br><span class="line">    <span class="variable">.clk</span>                     ( clk        ),</span><br><span class="line">    <span class="variable">.rst</span>                     ( rst        ),</span><br><span class="line">    <span class="variable">.en</span>                      ( en         ),</span><br><span class="line">    <span class="variable">.d</span>                       ( d    [<span class="number">6</span>:<span class="number">0</span>] ),</span><br><span class="line"></span><br><span class="line">    <span class="variable">.f</span>                       ( f    [<span class="number">6</span>:<span class="number">0</span>] ),</span><br><span class="line">    <span class="variable">.of</span>                      ( of         )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    #<span class="number">10</span> rst=<span class="number">0</span>;</span><br><span class="line">    #<span class="number">10</span> d=<span class="number">7</span>;    <span class="comment">//异或模式</span></span><br><span class="line">    #<span class="number">50</span> d=<span class="number">55</span>;</span><br><span class="line">    #<span class="number">50</span> d=<span class="number">42</span>;</span><br><span class="line">    #<span class="number">50</span> d=<span class="number">3</span>;</span><br><span class="line">    #<span class="number">550</span> rst=<span class="number">1</span>;</span><br><span class="line">    #<span class="number">30</span> rst=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">$finish</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a><span id="3.2">仿真结果</span></h3><p>加法模式：</p><img src="/2023/04/05/22462/plus.png" class title="加法模式仿真图"><p>减法模式：</p><img src="/2023/04/05/22462/minus.png" class title="减法模式仿真图"><p>异或模式:</p><img src="/2023/04/05/22462/xor.png" class title="异或模式仿真图"><p>其他工作模式自行测试！</p><h2 id="FPGA烧写"><a href="#FPGA烧写" class="headerlink" title="FPGA烧写"></a><span id="4">FPGA烧写</span></h2><p><strong>约束文件：</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">## This file is a general <span class="variable">.xdc</span> <span class="keyword">for</span> FPGAOL_BOARD (adopted from Nexys4 DDR Rev. C)</span><br><span class="line">## To <span class="keyword">use</span> it in a project:</span><br><span class="line">## - uncomment the lines corresponding to used pins</span><br><span class="line">## - rename the used ports (in each line, after get_ports) according to the top level signal names in the project</span><br><span class="line"></span><br><span class="line">## Clock signal</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN E3    IOSTANDARD LVCMOS33 &#125; [get_ports &#123; clk &#125;]; #IO_L12P_T1_MRCC_35 Sch=clk100mhz</span><br><span class="line">#create_clock -add -name sys_clk_pin -period <span class="number">10</span><span class="variable">.00</span> -waveform &#123;<span class="number">0</span> <span class="number">5</span>&#125; [get_ports &#123;CLK100MHZ&#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## FPGAOL LED (signle-digit-SEGPLAY)</span><br><span class="line"></span><br><span class="line">set_property -dict &#123; PACKAGE_PIN C17   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; f[<span class="number">0</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN D18   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; f[<span class="number">1</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN E18   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; f[<span class="number">2</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN G17   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; f[<span class="number">3</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN D17   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; f[<span class="number">4</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN E17   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; f[<span class="number">5</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN F18   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; f[<span class="number">6</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN G18   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; of &#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## FPGAOL SWITCH</span><br><span class="line"></span><br><span class="line">set_property -dict &#123; PACKAGE_PIN D14   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; d[<span class="number">0</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN F16   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; d[<span class="number">1</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN G16   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; d[<span class="number">2</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN H14   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; d[<span class="number">3</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN E16   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; d[<span class="number">4</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN F13   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; d[<span class="number">5</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN G13   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; d[<span class="number">6</span>] &#125;];</span><br><span class="line">set_property -dict &#123; PACKAGE_PIN H16   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; rst &#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## FPGAOL HEXPLAY</span><br><span class="line"></span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN A14   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; hexplay_data[<span class="number">0</span>] &#125;];</span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN A13   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; hexplay_data[<span class="number">1</span>] &#125;];</span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN A16   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; hexplay_data[<span class="number">2</span>] &#125;];</span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN A15   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; hexplay_data[<span class="number">3</span>] &#125;];</span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN B17   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; hexplay_an[<span class="number">0</span>] &#125;];</span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN B16   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; hexplay_an[<span class="number">1</span>] &#125;];</span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN A18   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; hexplay_an[<span class="number">2</span>] &#125;];</span><br><span class="line"></span><br><span class="line">## FPGAOL BUTTON &amp; SOFT_CLOCK</span><br><span class="line"></span><br><span class="line">set_property -dict &#123; PACKAGE_PIN B18   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; en &#125;];</span><br><span class="line"></span><br><span class="line">##USB-RS232 Interface</span><br><span class="line"></span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN C4    IOSTANDARD LVCMOS33 &#125; [get_ports &#123; UART_TXD_IN &#125;]; #IO_L7P_T1_AD6P_35 Sch=uart_txd_in</span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN D4    IOSTANDARD LVCMOS33 &#125; [get_ports &#123; UART_RXD_OUT &#125;]; #IO_L11N_T1_SRCC_35 Sch=uart_rxd_out</span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN D3    IOSTANDARD LVCMOS33 &#125; [get_ports &#123; UART_CTS &#125;]; #IO_L12N_T1_MRCC_35 Sch=uart_cts</span><br><span class="line">#set_property -dict &#123; PACKAGE_PIN E5    IOSTANDARD LVCMOS33 &#125; [get_ports &#123; UART_RTS &#125;]; #IO_L5N_T0_AD13N_35 Sch=uart_rts</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>烧写:</strong><br>然后在Vivado中点击左下角PROGRAM AND DEBUG&#x2F;Generate Bitstream可生成bit文件，所在目录：工程文件夹&#x2F;.runs&#x2F;impl_1&#x2F;***.bit。将其烧写在<a href="https://fpgaol.ustc.edu.cn/">FPGA在线平台</a>上即可远程控制真实的电路板。</p>]]></content>
      
      
      <categories>
          
          <category> COD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
